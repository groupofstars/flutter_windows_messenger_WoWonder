// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'all_user_chat_data.dart';

// **************************************************************************
// IsarCollectionGenerator
// **************************************************************************

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

extension GetAllUserChatDataCollection on Isar {
  IsarCollection<AllUserChatData> get allUserChatDatas => this.collection();
}

const AllUserChatDataSchema = CollectionSchema(
  name: r'AllUserChatData',
  id: -5289382914983657570,
  properties: {
    r'about': PropertySchema(
      id: 0,
      name: r'about',
      type: IsarType.string,
    ),
    r'active': PropertySchema(
      id: 1,
      name: r'active',
      type: IsarType.string,
    ),
    r'address': PropertySchema(
      id: 2,
      name: r'address',
      type: IsarType.string,
    ),
    r'admin': PropertySchema(
      id: 3,
      name: r'admin',
      type: IsarType.string,
    ),
    r'albumData': PropertySchema(
      id: 4,
      name: r'albumData',
      type: IsarType.string,
    ),
    r'androidMDeviceId': PropertySchema(
      id: 5,
      name: r'androidMDeviceId',
      type: IsarType.string,
    ),
    r'androidNDeviceId': PropertySchema(
      id: 6,
      name: r'androidNDeviceId',
      type: IsarType.string,
    ),
    r'apiNotificationSettings': PropertySchema(
      id: 7,
      name: r'apiNotificationSettings',
      type: IsarType.object,
      target: r'ApiNotificationSettings',
    ),
    r'authyId': PropertySchema(
      id: 8,
      name: r'authyId',
      type: IsarType.string,
    ),
    r'avatar': PropertySchema(
      id: 9,
      name: r'avatar',
      type: IsarType.string,
    ),
    r'avatarFull': PropertySchema(
      id: 10,
      name: r'avatarFull',
      type: IsarType.string,
    ),
    r'avatarOrg': PropertySchema(
      id: 11,
      name: r'avatarOrg',
      type: IsarType.string,
    ),
    r'backgroundImage': PropertySchema(
      id: 12,
      name: r'backgroundImage',
      type: IsarType.string,
    ),
    r'balance': PropertySchema(
      id: 13,
      name: r'balance',
      type: IsarType.string,
    ),
    r'banned': PropertySchema(
      id: 14,
      name: r'banned',
      type: IsarType.string,
    ),
    r'bannedReason': PropertySchema(
      id: 15,
      name: r'bannedReason',
      type: IsarType.string,
    ),
    r'bgStatus': PropertySchema(
      id: 16,
      name: r'bgStatus',
      type: IsarType.string,
    ),
    r'birthPrivacy': PropertySchema(
      id: 17,
      name: r'birthPrivacy',
      type: IsarType.string,
    ),
    r'chatId': PropertySchema(
      id: 18,
      name: r'chatId',
      type: IsarType.string,
    ),
    r'chatTime': PropertySchema(
      id: 19,
      name: r'chatTime',
      type: IsarType.string,
    ),
    r'chatType': PropertySchema(
      id: 20,
      name: r'chatType',
      type: IsarType.string,
    ),
    r'city': PropertySchema(
      id: 21,
      name: r'city',
      type: IsarType.string,
    ),
    r'codeSent': PropertySchema(
      id: 22,
      name: r'codeSent',
      type: IsarType.string,
    ),
    r'confirmFollowers': PropertySchema(
      id: 23,
      name: r'confirmFollowers',
      type: IsarType.string,
    ),
    r'convertedPoints': PropertySchema(
      id: 24,
      name: r'convertedPoints',
      type: IsarType.string,
    ),
    r'countryId': PropertySchema(
      id: 25,
      name: r'countryId',
      type: IsarType.string,
    ),
    r'cover': PropertySchema(
      id: 26,
      name: r'cover',
      type: IsarType.string,
    ),
    r'coverFull': PropertySchema(
      id: 27,
      name: r'coverFull',
      type: IsarType.string,
    ),
    r'coverOrg': PropertySchema(
      id: 28,
      name: r'coverOrg',
      type: IsarType.string,
    ),
    r'credits': PropertySchema(
      id: 29,
      name: r'credits',
      type: IsarType.string,
    ),
    r'cssFile': PropertySchema(
      id: 30,
      name: r'cssFile',
      type: IsarType.string,
    ),
    r'currentlyWorking': PropertySchema(
      id: 31,
      name: r'currentlyWorking',
      type: IsarType.string,
    ),
    r'dailyPoints': PropertySchema(
      id: 32,
      name: r'dailyPoints',
      type: IsarType.string,
    ),
    r'details': PropertySchema(
      id: 33,
      name: r'details',
      type: IsarType.object,
      target: r'Details',
    ),
    r'eAccepted': PropertySchema(
      id: 34,
      name: r'eAccepted',
      type: IsarType.string,
    ),
    r'eCommented': PropertySchema(
      id: 35,
      name: r'eCommented',
      type: IsarType.string,
    ),
    r'eFollowed': PropertySchema(
      id: 36,
      name: r'eFollowed',
      type: IsarType.string,
    ),
    r'eJoinedGroup': PropertySchema(
      id: 37,
      name: r'eJoinedGroup',
      type: IsarType.string,
    ),
    r'eLastNotif': PropertySchema(
      id: 38,
      name: r'eLastNotif',
      type: IsarType.string,
    ),
    r'eLiked': PropertySchema(
      id: 39,
      name: r'eLiked',
      type: IsarType.string,
    ),
    r'eLikedPage': PropertySchema(
      id: 40,
      name: r'eLikedPage',
      type: IsarType.string,
    ),
    r'eMentioned': PropertySchema(
      id: 41,
      name: r'eMentioned',
      type: IsarType.string,
    ),
    r'eProfileWallPost': PropertySchema(
      id: 42,
      name: r'eProfileWallPost',
      type: IsarType.string,
    ),
    r'eSentmeMsg': PropertySchema(
      id: 43,
      name: r'eSentmeMsg',
      type: IsarType.string,
    ),
    r'eShared': PropertySchema(
      id: 44,
      name: r'eShared',
      type: IsarType.string,
    ),
    r'eVisited': PropertySchema(
      id: 45,
      name: r'eVisited',
      type: IsarType.string,
    ),
    r'eWondered': PropertySchema(
      id: 46,
      name: r'eWondered',
      type: IsarType.string,
    ),
    r'email': PropertySchema(
      id: 47,
      name: r'email',
      type: IsarType.string,
    ),
    r'emailCode': PropertySchema(
      id: 48,
      name: r'emailCode',
      type: IsarType.string,
    ),
    r'emailNotification': PropertySchema(
      id: 49,
      name: r'emailNotification',
      type: IsarType.string,
    ),
    r'facebook': PropertySchema(
      id: 50,
      name: r'facebook',
      type: IsarType.string,
    ),
    r'firstName': PropertySchema(
      id: 51,
      name: r'firstName',
      type: IsarType.string,
    ),
    r'followPrivacy': PropertySchema(
      id: 52,
      name: r'followPrivacy',
      type: IsarType.string,
    ),
    r'friendPrivacy': PropertySchema(
      id: 53,
      name: r'friendPrivacy',
      type: IsarType.string,
    ),
    r'fromServerId': PropertySchema(
      id: 54,
      name: r'fromServerId',
      type: IsarType.string,
    ),
    r'gender': PropertySchema(
      id: 55,
      name: r'gender',
      type: IsarType.string,
    ),
    r'google': PropertySchema(
      id: 56,
      name: r'google',
      type: IsarType.string,
    ),
    r'googleSecret': PropertySchema(
      id: 57,
      name: r'googleSecret',
      type: IsarType.string,
    ),
    r'infoFile': PropertySchema(
      id: 58,
      name: r'infoFile',
      type: IsarType.string,
    ),
    r'instagram': PropertySchema(
      id: 59,
      name: r'instagram',
      type: IsarType.string,
    ),
    r'iosMDeviceId': PropertySchema(
      id: 60,
      name: r'iosMDeviceId',
      type: IsarType.string,
    ),
    r'iosNDeviceId': PropertySchema(
      id: 61,
      name: r'iosNDeviceId',
      type: IsarType.string,
    ),
    r'ipAddress': PropertySchema(
      id: 62,
      name: r'ipAddress',
      type: IsarType.string,
    ),
    r'isOpenToWork': PropertySchema(
      id: 63,
      name: r'isOpenToWork',
      type: IsarType.long,
    ),
    r'isPro': PropertySchema(
      id: 64,
      name: r'isPro',
      type: IsarType.string,
    ),
    r'isProvidingService': PropertySchema(
      id: 65,
      name: r'isProvidingService',
      type: IsarType.long,
    ),
    r'isReported': PropertySchema(
      id: 66,
      name: r'isReported',
      type: IsarType.bool,
    ),
    r'isReportedUser': PropertySchema(
      id: 67,
      name: r'isReportedUser',
      type: IsarType.long,
    ),
    r'isStoryMuted': PropertySchema(
      id: 68,
      name: r'isStoryMuted',
      type: IsarType.bool,
    ),
    r'isVerified': PropertySchema(
      id: 69,
      name: r'isVerified',
      type: IsarType.long,
    ),
    r'joined': PropertySchema(
      id: 70,
      name: r'joined',
      type: IsarType.string,
    ),
    r'language': PropertySchema(
      id: 71,
      name: r'language',
      type: IsarType.string,
    ),
    r'lastAvatarMod': PropertySchema(
      id: 72,
      name: r'lastAvatarMod',
      type: IsarType.string,
    ),
    r'lastCoverMod': PropertySchema(
      id: 73,
      name: r'lastCoverMod',
      type: IsarType.string,
    ),
    r'lastDataUpdate': PropertySchema(
      id: 74,
      name: r'lastDataUpdate',
      type: IsarType.string,
    ),
    r'lastEmailSent': PropertySchema(
      id: 75,
      name: r'lastEmailSent',
      type: IsarType.string,
    ),
    r'lastFollowId': PropertySchema(
      id: 76,
      name: r'lastFollowId',
      type: IsarType.string,
    ),
    r'lastLocationUpdate': PropertySchema(
      id: 77,
      name: r'lastLocationUpdate',
      type: IsarType.string,
    ),
    r'lastLoginData': PropertySchema(
      id: 78,
      name: r'lastLoginData',
      type: IsarType.string,
    ),
    r'lastMessage': PropertySchema(
      id: 79,
      name: r'lastMessage',
      type: IsarType.object,
      target: r'LastMessage',
    ),
    r'lastName': PropertySchema(
      id: 80,
      name: r'lastName',
      type: IsarType.string,
    ),
    r'lastseen': PropertySchema(
      id: 81,
      name: r'lastseen',
      type: IsarType.string,
    ),
    r'lastseenStatus': PropertySchema(
      id: 82,
      name: r'lastseenStatus',
      type: IsarType.string,
    ),
    r'lastseenUnixTime': PropertySchema(
      id: 83,
      name: r'lastseenUnixTime',
      type: IsarType.string,
    ),
    r'lat': PropertySchema(
      id: 84,
      name: r'lat',
      type: IsarType.string,
    ),
    r'linkedin': PropertySchema(
      id: 85,
      name: r'linkedin',
      type: IsarType.string,
    ),
    r'lng': PropertySchema(
      id: 86,
      name: r'lng',
      type: IsarType.string,
    ),
    r'messageCount': PropertySchema(
      id: 87,
      name: r'messageCount',
      type: IsarType.string,
    ),
    r'messagePrivacy': PropertySchema(
      id: 88,
      name: r'messagePrivacy',
      type: IsarType.string,
    ),
    r'mute': PropertySchema(
      id: 89,
      name: r'mute',
      type: IsarType.object,
      target: r'Mute',
    ),
    r'name': PropertySchema(
      id: 90,
      name: r'name',
      type: IsarType.string,
    ),
    r'newEmail': PropertySchema(
      id: 91,
      name: r'newEmail',
      type: IsarType.string,
    ),
    r'newPhone': PropertySchema(
      id: 92,
      name: r'newPhone',
      type: IsarType.string,
    ),
    r'notificationSettings': PropertySchema(
      id: 93,
      name: r'notificationSettings',
      type: IsarType.string,
    ),
    r'notificationsSound': PropertySchema(
      id: 94,
      name: r'notificationsSound',
      type: IsarType.string,
    ),
    r'okru': PropertySchema(
      id: 95,
      name: r'okru',
      type: IsarType.string,
    ),
    r'openToWorkData': PropertySchema(
      id: 96,
      name: r'openToWorkData',
      type: IsarType.string,
    ),
    r'orderPostsBy': PropertySchema(
      id: 97,
      name: r'orderPostsBy',
      type: IsarType.string,
    ),
    r'password': PropertySchema(
      id: 98,
      name: r'password',
      type: IsarType.string,
    ),
    r'paypalEmail': PropertySchema(
      id: 99,
      name: r'paypalEmail',
      type: IsarType.string,
    ),
    r'paystackRef': PropertySchema(
      id: 100,
      name: r'paystackRef',
      type: IsarType.string,
    ),
    r'phoneNumber': PropertySchema(
      id: 101,
      name: r'phoneNumber',
      type: IsarType.string,
    ),
    r'pointDayExpire': PropertySchema(
      id: 102,
      name: r'pointDayExpire',
      type: IsarType.string,
    ),
    r'points': PropertySchema(
      id: 103,
      name: r'points',
      type: IsarType.string,
    ),
    r'postPrivacy': PropertySchema(
      id: 104,
      name: r'postPrivacy',
      type: IsarType.string,
    ),
    r'proRemainder': PropertySchema(
      id: 105,
      name: r'proRemainder',
      type: IsarType.string,
    ),
    r'proTime': PropertySchema(
      id: 106,
      name: r'proTime',
      type: IsarType.string,
    ),
    r'proType': PropertySchema(
      id: 107,
      name: r'proType',
      type: IsarType.string,
    ),
    r'providingService': PropertySchema(
      id: 108,
      name: r'providingService',
      type: IsarType.long,
    ),
    r'refUserId': PropertySchema(
      id: 109,
      name: r'refUserId',
      type: IsarType.string,
    ),
    r'referrer': PropertySchema(
      id: 110,
      name: r'referrer',
      type: IsarType.string,
    ),
    r'registered': PropertySchema(
      id: 111,
      name: r'registered',
      type: IsarType.string,
    ),
    r'relationshipId': PropertySchema(
      id: 112,
      name: r'relationshipId',
      type: IsarType.string,
    ),
    r'school': PropertySchema(
      id: 113,
      name: r'school',
      type: IsarType.string,
    ),
    r'schoolCompleted': PropertySchema(
      id: 114,
      name: r'schoolCompleted',
      type: IsarType.string,
    ),
    r'shareMyData': PropertySchema(
      id: 115,
      name: r'shareMyData',
      type: IsarType.string,
    ),
    r'shareMyLocation': PropertySchema(
      id: 116,
      name: r'shareMyLocation',
      type: IsarType.string,
    ),
    r'showActivitiesPrivacy': PropertySchema(
      id: 117,
      name: r'showActivitiesPrivacy',
      type: IsarType.string,
    ),
    r'showlastseen': PropertySchema(
      id: 118,
      name: r'showlastseen',
      type: IsarType.string,
    ),
    r'sidebarData': PropertySchema(
      id: 119,
      name: r'sidebarData',
      type: IsarType.string,
    ),
    r'smsCode': PropertySchema(
      id: 120,
      name: r'smsCode',
      type: IsarType.string,
    ),
    r'socialLogin': PropertySchema(
      id: 121,
      name: r'socialLogin',
      type: IsarType.string,
    ),
    r'src': PropertySchema(
      id: 122,
      name: r'src',
      type: IsarType.string,
    ),
    r'startUp': PropertySchema(
      id: 123,
      name: r'startUp',
      type: IsarType.string,
    ),
    r'startUpInfo': PropertySchema(
      id: 124,
      name: r'startUpInfo',
      type: IsarType.string,
    ),
    r'startupFollow': PropertySchema(
      id: 125,
      name: r'startupFollow',
      type: IsarType.string,
    ),
    r'startupImage': PropertySchema(
      id: 126,
      name: r'startupImage',
      type: IsarType.string,
    ),
    r'state': PropertySchema(
      id: 127,
      name: r'state',
      type: IsarType.string,
    ),
    r'status': PropertySchema(
      id: 128,
      name: r'status',
      type: IsarType.string,
    ),
    r'timeCodeSent': PropertySchema(
      id: 129,
      name: r'timeCodeSent',
      type: IsarType.string,
    ),
    r'timezone': PropertySchema(
      id: 130,
      name: r'timezone',
      type: IsarType.string,
    ),
    r'twitter': PropertySchema(
      id: 131,
      name: r'twitter',
      type: IsarType.string,
    ),
    r'twoFactor': PropertySchema(
      id: 132,
      name: r'twoFactor',
      type: IsarType.string,
    ),
    r'twoFactorHash': PropertySchema(
      id: 133,
      name: r'twoFactorHash',
      type: IsarType.string,
    ),
    r'twoFactorMethod': PropertySchema(
      id: 134,
      name: r'twoFactorMethod',
      type: IsarType.string,
    ),
    r'twoFactorVerified': PropertySchema(
      id: 135,
      name: r'twoFactorVerified',
      type: IsarType.string,
    ),
    r'type': PropertySchema(
      id: 136,
      name: r'type',
      type: IsarType.string,
    ),
    r'url': PropertySchema(
      id: 137,
      name: r'url',
      type: IsarType.string,
    ),
    r'userId': PropertySchema(
      id: 138,
      name: r'userId',
      type: IsarType.string,
    ),
    r'userPlatform': PropertySchema(
      id: 139,
      name: r'userPlatform',
      type: IsarType.string,
    ),
    r'username': PropertySchema(
      id: 140,
      name: r'username',
      type: IsarType.string,
    ),
    r'verified': PropertySchema(
      id: 141,
      name: r'verified',
      type: IsarType.string,
    ),
    r'visitPrivacy': PropertySchema(
      id: 142,
      name: r'visitPrivacy',
      type: IsarType.string,
    ),
    r'vk': PropertySchema(
      id: 143,
      name: r'vk',
      type: IsarType.string,
    ),
    r'wallet': PropertySchema(
      id: 144,
      name: r'wallet',
      type: IsarType.string,
    ),
    r'weatherUnit': PropertySchema(
      id: 145,
      name: r'weatherUnit',
      type: IsarType.string,
    ),
    r'webDeviceId': PropertySchema(
      id: 146,
      name: r'webDeviceId',
      type: IsarType.string,
    ),
    r'website': PropertySchema(
      id: 147,
      name: r'website',
      type: IsarType.string,
    ),
    r'working': PropertySchema(
      id: 148,
      name: r'working',
      type: IsarType.string,
    ),
    r'workingLink': PropertySchema(
      id: 149,
      name: r'workingLink',
      type: IsarType.string,
    ),
    r'youtube': PropertySchema(
      id: 150,
      name: r'youtube',
      type: IsarType.string,
    ),
    r'zip': PropertySchema(
      id: 151,
      name: r'zip',
      type: IsarType.string,
    )
  },
  estimateSize: _allUserChatDataEstimateSize,
  serialize: _allUserChatDataSerialize,
  deserialize: _allUserChatDataDeserialize,
  deserializeProp: _allUserChatDataDeserializeProp,
  idName: r'id',
  indexes: {},
  links: {},
  embeddedSchemas: {
    r'Details': DetailsSchema,
    r'ApiNotificationSettings': ApiNotificationSettingsSchema,
    r'Mute': MuteSchema,
    r'LastMessage': LastMessageSchema,
    r'MessageUser': MessageUserSchema,
    r'Reaction': ReactionSchema
  },
  getId: _allUserChatDataGetId,
  getLinks: _allUserChatDataGetLinks,
  attach: _allUserChatDataAttach,
  version: '3.1.0+1',
);

int _allUserChatDataEstimateSize(
  AllUserChatData object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  bytesCount += 3 + object.about.length * 3;
  bytesCount += 3 + object.active.length * 3;
  bytesCount += 3 + object.address.length * 3;
  bytesCount += 3 + object.admin.length * 3;
  bytesCount += 3 + object.albumData.length * 3;
  bytesCount += 3 + object.androidMDeviceId.length * 3;
  bytesCount += 3 + object.androidNDeviceId.length * 3;
  bytesCount += 3 +
      ApiNotificationSettingsSchema.estimateSize(object.apiNotificationSettings,
          allOffsets[ApiNotificationSettings]!, allOffsets);
  bytesCount += 3 + object.authyId.length * 3;
  bytesCount += 3 + object.avatar.length * 3;
  bytesCount += 3 + object.avatarFull.length * 3;
  bytesCount += 3 + object.avatarOrg.length * 3;
  bytesCount += 3 + object.backgroundImage.length * 3;
  bytesCount += 3 + object.balance.length * 3;
  bytesCount += 3 + object.banned.length * 3;
  bytesCount += 3 + object.bannedReason.length * 3;
  bytesCount += 3 + object.backgroundImageStatus.length * 3;
  bytesCount += 3 + object.birthPrivacy.length * 3;
  bytesCount += 3 + object.chatId.length * 3;
  bytesCount += 3 + object.chatTime.length * 3;
  bytesCount += 3 + object.chatType.length * 3;
  bytesCount += 3 + object.city.length * 3;
  bytesCount += 3 + object.codeSent.length * 3;
  bytesCount += 3 + object.confirmFollowers.length * 3;
  bytesCount += 3 + object.convertedPoints.length * 3;
  bytesCount += 3 + object.countryId.length * 3;
  bytesCount += 3 + object.cover.length * 3;
  bytesCount += 3 + object.coverFull.length * 3;
  bytesCount += 3 + object.coverOrg.length * 3;
  bytesCount += 3 + object.credits.length * 3;
  bytesCount += 3 + object.cssFile.length * 3;
  bytesCount += 3 + object.currentlyWorking.length * 3;
  bytesCount += 3 + object.dailyPoints.length * 3;
  {
    final value = object.details;
    if (value != null) {
      bytesCount += 3 +
          DetailsSchema.estimateSize(value, allOffsets[Details]!, allOffsets);
    }
  }
  bytesCount += 3 + object.eAccepted.length * 3;
  bytesCount += 3 + object.eCommented.length * 3;
  bytesCount += 3 + object.eFollowed.length * 3;
  bytesCount += 3 + object.eJoinedGroup.length * 3;
  bytesCount += 3 + object.eLastNotif.length * 3;
  bytesCount += 3 + object.eLiked.length * 3;
  bytesCount += 3 + object.eLikedPage.length * 3;
  bytesCount += 3 + object.eMentioned.length * 3;
  bytesCount += 3 + object.eProfileWallPost.length * 3;
  bytesCount += 3 + object.eSentmeMsg.length * 3;
  bytesCount += 3 + object.eShared.length * 3;
  bytesCount += 3 + object.eVisited.length * 3;
  bytesCount += 3 + object.eWondered.length * 3;
  {
    final value = object.email;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  bytesCount += 3 + object.emailCode.length * 3;
  bytesCount += 3 + object.emailNotification.length * 3;
  bytesCount += 3 + object.facebook.length * 3;
  {
    final value = object.firstName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  bytesCount += 3 + object.followPrivacy.length * 3;
  bytesCount += 3 + object.friendPrivacy.length * 3;
  bytesCount += 3 + object.fromServerId.length * 3;
  bytesCount += 3 + object.gender.length * 3;
  bytesCount += 3 + object.google.length * 3;
  bytesCount += 3 + object.googleSecret.length * 3;
  bytesCount += 3 + object.infoFile.length * 3;
  bytesCount += 3 + object.instagram.length * 3;
  bytesCount += 3 + object.iosMDeviceId.length * 3;
  bytesCount += 3 + object.iosNDeviceId.length * 3;
  bytesCount += 3 + object.ipAddress.length * 3;
  bytesCount += 3 + object.isPro.length * 3;
  bytesCount += 3 + object.joined.length * 3;
  bytesCount += 3 + object.language.length * 3;
  bytesCount += 3 + object.lastAvatarMod.length * 3;
  bytesCount += 3 + object.lastCoverMod.length * 3;
  bytesCount += 3 + object.lastDataUpdate.length * 3;
  bytesCount += 3 + object.lastEmailSent.length * 3;
  bytesCount += 3 + object.lastFollowId.length * 3;
  bytesCount += 3 + object.lastLocationUpdate.length * 3;
  bytesCount += 3 + object.lastLoginData.length * 3;
  bytesCount += 3 +
      LastMessageSchema.estimateSize(
          object.lastMessage, allOffsets[LastMessage]!, allOffsets);
  bytesCount += 3 + object.lastName.length * 3;
  bytesCount += 3 + object.lastseen.length * 3;
  bytesCount += 3 + object.lastseenStatus.length * 3;
  bytesCount += 3 + object.lastseenUnixTime.length * 3;
  bytesCount += 3 + object.lat.length * 3;
  bytesCount += 3 + object.linkedin.length * 3;
  bytesCount += 3 + object.lng.length * 3;
  bytesCount += 3 + object.messageCount.length * 3;
  bytesCount += 3 + object.messagePrivacy.length * 3;
  bytesCount +=
      3 + MuteSchema.estimateSize(object.mute, allOffsets[Mute]!, allOffsets);
  bytesCount += 3 + object.name.length * 3;
  bytesCount += 3 + object.newEmail.length * 3;
  bytesCount += 3 + object.newPhone.length * 3;
  bytesCount += 3 + object.notificationSettings.length * 3;
  bytesCount += 3 + object.notificationsSound.length * 3;
  bytesCount += 3 + object.okru.length * 3;
  bytesCount += 3 + object.openToWorkData.length * 3;
  bytesCount += 3 + object.orderPostsBy.length * 3;
  {
    final value = object.password;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  bytesCount += 3 + object.paypalEmail.length * 3;
  bytesCount += 3 + object.paystackRef.length * 3;
  bytesCount += 3 + object.phoneNumber.length * 3;
  bytesCount += 3 + object.pointDayExpire.length * 3;
  bytesCount += 3 + object.points.length * 3;
  bytesCount += 3 + object.postPrivacy.length * 3;
  bytesCount += 3 + object.proRemainder.length * 3;
  bytesCount += 3 + object.proTime.length * 3;
  bytesCount += 3 + object.proType.length * 3;
  bytesCount += 3 + object.refUserId.length * 3;
  bytesCount += 3 + object.referrer.length * 3;
  bytesCount += 3 + object.registered.length * 3;
  bytesCount += 3 + object.relationshipId.length * 3;
  bytesCount += 3 + object.school.length * 3;
  bytesCount += 3 + object.schoolCompleted.length * 3;
  bytesCount += 3 + object.shareMyData.length * 3;
  bytesCount += 3 + object.shareMyLocation.length * 3;
  bytesCount += 3 + object.showActivitiesPrivacy.length * 3;
  bytesCount += 3 + object.showlastseen.length * 3;
  bytesCount += 3 + object.sidebarData.length * 3;
  bytesCount += 3 + object.smsCode.length * 3;
  bytesCount += 3 + object.socialLogin.length * 3;
  bytesCount += 3 + object.src.length * 3;
  bytesCount += 3 + object.startUp.length * 3;
  bytesCount += 3 + object.startUpInfo.length * 3;
  bytesCount += 3 + object.startupFollow.length * 3;
  bytesCount += 3 + object.startupImage.length * 3;
  bytesCount += 3 + object.state.length * 3;
  bytesCount += 3 + object.status.length * 3;
  bytesCount += 3 + object.timeCodeSent.length * 3;
  bytesCount += 3 + object.timezone.length * 3;
  bytesCount += 3 + object.twitter.length * 3;
  bytesCount += 3 + object.twoFactor.length * 3;
  bytesCount += 3 + object.twoFactorHash.length * 3;
  bytesCount += 3 + object.twoFactorMethod.length * 3;
  bytesCount += 3 + object.twoFactorVerified.length * 3;
  bytesCount += 3 + object.type.length * 3;
  bytesCount += 3 + object.url.length * 3;
  bytesCount += 3 + object.userId.length * 3;
  bytesCount += 3 + object.userPlatform.length * 3;
  {
    final value = object.username;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  bytesCount += 3 + object.verified.length * 3;
  bytesCount += 3 + object.visitPrivacy.length * 3;
  bytesCount += 3 + object.vk.length * 3;
  bytesCount += 3 + object.wallet.length * 3;
  bytesCount += 3 + object.weatherUnit.length * 3;
  bytesCount += 3 + object.webDeviceId.length * 3;
  bytesCount += 3 + object.website.length * 3;
  bytesCount += 3 + object.working.length * 3;
  bytesCount += 3 + object.workingLink.length * 3;
  bytesCount += 3 + object.youtube.length * 3;
  bytesCount += 3 + object.zip.length * 3;
  return bytesCount;
}

void _allUserChatDataSerialize(
  AllUserChatData object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeString(offsets[0], object.about);
  writer.writeString(offsets[1], object.active);
  writer.writeString(offsets[2], object.address);
  writer.writeString(offsets[3], object.admin);
  writer.writeString(offsets[4], object.albumData);
  writer.writeString(offsets[5], object.androidMDeviceId);
  writer.writeString(offsets[6], object.androidNDeviceId);
  writer.writeObject<ApiNotificationSettings>(
    offsets[7],
    allOffsets,
    ApiNotificationSettingsSchema.serialize,
    object.apiNotificationSettings,
  );
  writer.writeString(offsets[8], object.authyId);
  writer.writeString(offsets[9], object.avatar);
  writer.writeString(offsets[10], object.avatarFull);
  writer.writeString(offsets[11], object.avatarOrg);
  writer.writeString(offsets[12], object.backgroundImage);
  writer.writeString(offsets[13], object.balance);
  writer.writeString(offsets[14], object.banned);
  writer.writeString(offsets[15], object.bannedReason);
  writer.writeString(offsets[16], object.backgroundImageStatus);
  writer.writeString(offsets[17], object.birthPrivacy);
  writer.writeString(offsets[18], object.chatId);
  writer.writeString(offsets[19], object.chatTime);
  writer.writeString(offsets[20], object.chatType);
  writer.writeString(offsets[21], object.city);
  writer.writeString(offsets[22], object.codeSent);
  writer.writeString(offsets[23], object.confirmFollowers);
  writer.writeString(offsets[24], object.convertedPoints);
  writer.writeString(offsets[25], object.countryId);
  writer.writeString(offsets[26], object.cover);
  writer.writeString(offsets[27], object.coverFull);
  writer.writeString(offsets[28], object.coverOrg);
  writer.writeString(offsets[29], object.credits);
  writer.writeString(offsets[30], object.cssFile);
  writer.writeString(offsets[31], object.currentlyWorking);
  writer.writeString(offsets[32], object.dailyPoints);
  writer.writeObject<Details>(
    offsets[33],
    allOffsets,
    DetailsSchema.serialize,
    object.details,
  );
  writer.writeString(offsets[34], object.eAccepted);
  writer.writeString(offsets[35], object.eCommented);
  writer.writeString(offsets[36], object.eFollowed);
  writer.writeString(offsets[37], object.eJoinedGroup);
  writer.writeString(offsets[38], object.eLastNotif);
  writer.writeString(offsets[39], object.eLiked);
  writer.writeString(offsets[40], object.eLikedPage);
  writer.writeString(offsets[41], object.eMentioned);
  writer.writeString(offsets[42], object.eProfileWallPost);
  writer.writeString(offsets[43], object.eSentmeMsg);
  writer.writeString(offsets[44], object.eShared);
  writer.writeString(offsets[45], object.eVisited);
  writer.writeString(offsets[46], object.eWondered);
  writer.writeString(offsets[47], object.email);
  writer.writeString(offsets[48], object.emailCode);
  writer.writeString(offsets[49], object.emailNotification);
  writer.writeString(offsets[50], object.facebook);
  writer.writeString(offsets[51], object.firstName);
  writer.writeString(offsets[52], object.followPrivacy);
  writer.writeString(offsets[53], object.friendPrivacy);
  writer.writeString(offsets[54], object.fromServerId);
  writer.writeString(offsets[55], object.gender);
  writer.writeString(offsets[56], object.google);
  writer.writeString(offsets[57], object.googleSecret);
  writer.writeString(offsets[58], object.infoFile);
  writer.writeString(offsets[59], object.instagram);
  writer.writeString(offsets[60], object.iosMDeviceId);
  writer.writeString(offsets[61], object.iosNDeviceId);
  writer.writeString(offsets[62], object.ipAddress);
  writer.writeLong(offsets[63], object.isOpenToWork);
  writer.writeString(offsets[64], object.isPro);
  writer.writeLong(offsets[65], object.isProvidingService);
  writer.writeBool(offsets[66], object.isReported);
  writer.writeLong(offsets[67], object.isReportedUser);
  writer.writeBool(offsets[68], object.isStoryMuted);
  writer.writeLong(offsets[69], object.isVerified);
  writer.writeString(offsets[70], object.joined);
  writer.writeString(offsets[71], object.language);
  writer.writeString(offsets[72], object.lastAvatarMod);
  writer.writeString(offsets[73], object.lastCoverMod);
  writer.writeString(offsets[74], object.lastDataUpdate);
  writer.writeString(offsets[75], object.lastEmailSent);
  writer.writeString(offsets[76], object.lastFollowId);
  writer.writeString(offsets[77], object.lastLocationUpdate);
  writer.writeString(offsets[78], object.lastLoginData);
  writer.writeObject<LastMessage>(
    offsets[79],
    allOffsets,
    LastMessageSchema.serialize,
    object.lastMessage,
  );
  writer.writeString(offsets[80], object.lastName);
  writer.writeString(offsets[81], object.lastseen);
  writer.writeString(offsets[82], object.lastseenStatus);
  writer.writeString(offsets[83], object.lastseenUnixTime);
  writer.writeString(offsets[84], object.lat);
  writer.writeString(offsets[85], object.linkedin);
  writer.writeString(offsets[86], object.lng);
  writer.writeString(offsets[87], object.messageCount);
  writer.writeString(offsets[88], object.messagePrivacy);
  writer.writeObject<Mute>(
    offsets[89],
    allOffsets,
    MuteSchema.serialize,
    object.mute,
  );
  writer.writeString(offsets[90], object.name);
  writer.writeString(offsets[91], object.newEmail);
  writer.writeString(offsets[92], object.newPhone);
  writer.writeString(offsets[93], object.notificationSettings);
  writer.writeString(offsets[94], object.notificationsSound);
  writer.writeString(offsets[95], object.okru);
  writer.writeString(offsets[96], object.openToWorkData);
  writer.writeString(offsets[97], object.orderPostsBy);
  writer.writeString(offsets[98], object.password);
  writer.writeString(offsets[99], object.paypalEmail);
  writer.writeString(offsets[100], object.paystackRef);
  writer.writeString(offsets[101], object.phoneNumber);
  writer.writeString(offsets[102], object.pointDayExpire);
  writer.writeString(offsets[103], object.points);
  writer.writeString(offsets[104], object.postPrivacy);
  writer.writeString(offsets[105], object.proRemainder);
  writer.writeString(offsets[106], object.proTime);
  writer.writeString(offsets[107], object.proType);
  writer.writeLong(offsets[108], object.providingService);
  writer.writeString(offsets[109], object.refUserId);
  writer.writeString(offsets[110], object.referrer);
  writer.writeString(offsets[111], object.registered);
  writer.writeString(offsets[112], object.relationshipId);
  writer.writeString(offsets[113], object.school);
  writer.writeString(offsets[114], object.schoolCompleted);
  writer.writeString(offsets[115], object.shareMyData);
  writer.writeString(offsets[116], object.shareMyLocation);
  writer.writeString(offsets[117], object.showActivitiesPrivacy);
  writer.writeString(offsets[118], object.showlastseen);
  writer.writeString(offsets[119], object.sidebarData);
  writer.writeString(offsets[120], object.smsCode);
  writer.writeString(offsets[121], object.socialLogin);
  writer.writeString(offsets[122], object.src);
  writer.writeString(offsets[123], object.startUp);
  writer.writeString(offsets[124], object.startUpInfo);
  writer.writeString(offsets[125], object.startupFollow);
  writer.writeString(offsets[126], object.startupImage);
  writer.writeString(offsets[127], object.state);
  writer.writeString(offsets[128], object.status);
  writer.writeString(offsets[129], object.timeCodeSent);
  writer.writeString(offsets[130], object.timezone);
  writer.writeString(offsets[131], object.twitter);
  writer.writeString(offsets[132], object.twoFactor);
  writer.writeString(offsets[133], object.twoFactorHash);
  writer.writeString(offsets[134], object.twoFactorMethod);
  writer.writeString(offsets[135], object.twoFactorVerified);
  writer.writeString(offsets[136], object.type);
  writer.writeString(offsets[137], object.url);
  writer.writeString(offsets[138], object.userId);
  writer.writeString(offsets[139], object.userPlatform);
  writer.writeString(offsets[140], object.username);
  writer.writeString(offsets[141], object.verified);
  writer.writeString(offsets[142], object.visitPrivacy);
  writer.writeString(offsets[143], object.vk);
  writer.writeString(offsets[144], object.wallet);
  writer.writeString(offsets[145], object.weatherUnit);
  writer.writeString(offsets[146], object.webDeviceId);
  writer.writeString(offsets[147], object.website);
  writer.writeString(offsets[148], object.working);
  writer.writeString(offsets[149], object.workingLink);
  writer.writeString(offsets[150], object.youtube);
  writer.writeString(offsets[151], object.zip);
}

AllUserChatData _allUserChatDataDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = AllUserChatData(
    about: reader.readString(offsets[0]),
    active: reader.readString(offsets[1]),
    address: reader.readString(offsets[2]),
    admin: reader.readString(offsets[3]),
    albumData: reader.readString(offsets[4]),
    androidMDeviceId: reader.readString(offsets[5]),
    androidNDeviceId: reader.readString(offsets[6]),
    apiNotificationSettings: reader.readObjectOrNull<ApiNotificationSettings>(
          offsets[7],
          ApiNotificationSettingsSchema.deserialize,
          allOffsets,
        ) ??
        ApiNotificationSettings(),
    authyId: reader.readString(offsets[8]),
    avatar: reader.readString(offsets[9]),
    avatarFull: reader.readString(offsets[10]),
    avatarOrg: reader.readString(offsets[11]),
    backgroundImage: reader.readString(offsets[12]),
    balance: reader.readString(offsets[13]),
    banned: reader.readString(offsets[14]),
    bannedReason: reader.readString(offsets[15]),
    backgroundImageStatus: reader.readString(offsets[16]),
    birthPrivacy: reader.readString(offsets[17]),
    chatId: reader.readString(offsets[18]),
    chatTime: reader.readString(offsets[19]),
    chatType: reader.readString(offsets[20]),
    city: reader.readString(offsets[21]),
    codeSent: reader.readString(offsets[22]),
    confirmFollowers: reader.readString(offsets[23]),
    convertedPoints: reader.readString(offsets[24]),
    countryId: reader.readString(offsets[25]),
    cover: reader.readString(offsets[26]),
    coverFull: reader.readString(offsets[27]),
    coverOrg: reader.readString(offsets[28]),
    credits: reader.readString(offsets[29]),
    cssFile: reader.readString(offsets[30]),
    currentlyWorking: reader.readString(offsets[31]),
    dailyPoints: reader.readString(offsets[32]),
    details: reader.readObjectOrNull<Details>(
      offsets[33],
      DetailsSchema.deserialize,
      allOffsets,
    ),
    eAccepted: reader.readString(offsets[34]),
    eCommented: reader.readString(offsets[35]),
    eFollowed: reader.readString(offsets[36]),
    eJoinedGroup: reader.readString(offsets[37]),
    eLastNotif: reader.readString(offsets[38]),
    eLiked: reader.readString(offsets[39]),
    eLikedPage: reader.readString(offsets[40]),
    eMentioned: reader.readString(offsets[41]),
    eProfileWallPost: reader.readString(offsets[42]),
    eSentmeMsg: reader.readString(offsets[43]),
    eShared: reader.readString(offsets[44]),
    eVisited: reader.readString(offsets[45]),
    eWondered: reader.readString(offsets[46]),
    email: reader.readStringOrNull(offsets[47]),
    emailCode: reader.readString(offsets[48]),
    emailNotification: reader.readString(offsets[49]),
    facebook: reader.readString(offsets[50]),
    firstName: reader.readStringOrNull(offsets[51]),
    followPrivacy: reader.readString(offsets[52]),
    friendPrivacy: reader.readString(offsets[53]),
    fromServerId: reader.readString(offsets[54]),
    gender: reader.readString(offsets[55]),
    google: reader.readString(offsets[56]),
    googleSecret: reader.readString(offsets[57]),
    infoFile: reader.readString(offsets[58]),
    instagram: reader.readString(offsets[59]),
    iosMDeviceId: reader.readString(offsets[60]),
    iosNDeviceId: reader.readString(offsets[61]),
    ipAddress: reader.readString(offsets[62]),
    isOpenToWork: reader.readLong(offsets[63]),
    isPro: reader.readString(offsets[64]),
    isProvidingService: reader.readLong(offsets[65]),
    isReported: reader.readBool(offsets[66]),
    isReportedUser: reader.readLong(offsets[67]),
    isStoryMuted: reader.readBool(offsets[68]),
    isVerified: reader.readLong(offsets[69]),
    joined: reader.readString(offsets[70]),
    language: reader.readString(offsets[71]),
    lastAvatarMod: reader.readString(offsets[72]),
    lastCoverMod: reader.readString(offsets[73]),
    lastDataUpdate: reader.readString(offsets[74]),
    lastEmailSent: reader.readString(offsets[75]),
    lastFollowId: reader.readString(offsets[76]),
    lastLocationUpdate: reader.readString(offsets[77]),
    lastLoginData: reader.readString(offsets[78]),
    lastMessage: reader.readObjectOrNull<LastMessage>(
          offsets[79],
          LastMessageSchema.deserialize,
          allOffsets,
        ) ??
        LastMessage(),
    lastName: reader.readString(offsets[80]),
    lastseen: reader.readString(offsets[81]),
    lastseenStatus: reader.readString(offsets[82]),
    lastseenUnixTime: reader.readString(offsets[83]),
    lat: reader.readString(offsets[84]),
    linkedin: reader.readString(offsets[85]),
    lng: reader.readString(offsets[86]),
    messageCount: reader.readString(offsets[87]),
    messagePrivacy: reader.readString(offsets[88]),
    mute: reader.readObjectOrNull<Mute>(
          offsets[89],
          MuteSchema.deserialize,
          allOffsets,
        ) ??
        Mute(),
    name: reader.readString(offsets[90]),
    newEmail: reader.readString(offsets[91]),
    newPhone: reader.readString(offsets[92]),
    notificationSettings: reader.readString(offsets[93]),
    notificationsSound: reader.readString(offsets[94]),
    okru: reader.readString(offsets[95]),
    openToWorkData: reader.readString(offsets[96]),
    orderPostsBy: reader.readString(offsets[97]),
    password: reader.readStringOrNull(offsets[98]),
    paypalEmail: reader.readString(offsets[99]),
    paystackRef: reader.readString(offsets[100]),
    phoneNumber: reader.readString(offsets[101]),
    pointDayExpire: reader.readString(offsets[102]),
    points: reader.readString(offsets[103]),
    postPrivacy: reader.readString(offsets[104]),
    proRemainder: reader.readString(offsets[105]),
    proTime: reader.readString(offsets[106]),
    proType: reader.readString(offsets[107]),
    providingService: reader.readLong(offsets[108]),
    refUserId: reader.readString(offsets[109]),
    referrer: reader.readString(offsets[110]),
    registered: reader.readString(offsets[111]),
    relationshipId: reader.readString(offsets[112]),
    school: reader.readString(offsets[113]),
    schoolCompleted: reader.readString(offsets[114]),
    shareMyData: reader.readString(offsets[115]),
    shareMyLocation: reader.readString(offsets[116]),
    showActivitiesPrivacy: reader.readString(offsets[117]),
    showlastseen: reader.readString(offsets[118]),
    sidebarData: reader.readString(offsets[119]),
    smsCode: reader.readString(offsets[120]),
    socialLogin: reader.readString(offsets[121]),
    src: reader.readString(offsets[122]),
    startUp: reader.readString(offsets[123]),
    startUpInfo: reader.readString(offsets[124]),
    startupFollow: reader.readString(offsets[125]),
    startupImage: reader.readString(offsets[126]),
    state: reader.readString(offsets[127]),
    status: reader.readString(offsets[128]),
    timeCodeSent: reader.readString(offsets[129]),
    timezone: reader.readString(offsets[130]),
    twitter: reader.readString(offsets[131]),
    twoFactor: reader.readString(offsets[132]),
    twoFactorHash: reader.readString(offsets[133]),
    twoFactorMethod: reader.readString(offsets[134]),
    twoFactorVerified: reader.readString(offsets[135]),
    type: reader.readString(offsets[136]),
    url: reader.readString(offsets[137]),
    userId: reader.readString(offsets[138]),
    userPlatform: reader.readString(offsets[139]),
    username: reader.readStringOrNull(offsets[140]),
    verified: reader.readString(offsets[141]),
    visitPrivacy: reader.readString(offsets[142]),
    vk: reader.readString(offsets[143]),
    wallet: reader.readString(offsets[144]),
    weatherUnit: reader.readString(offsets[145]),
    webDeviceId: reader.readString(offsets[146]),
    website: reader.readString(offsets[147]),
    working: reader.readString(offsets[148]),
    workingLink: reader.readString(offsets[149]),
    youtube: reader.readString(offsets[150]),
    zip: reader.readString(offsets[151]),
  );
  return object;
}

P _allUserChatDataDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readString(offset)) as P;
    case 1:
      return (reader.readString(offset)) as P;
    case 2:
      return (reader.readString(offset)) as P;
    case 3:
      return (reader.readString(offset)) as P;
    case 4:
      return (reader.readString(offset)) as P;
    case 5:
      return (reader.readString(offset)) as P;
    case 6:
      return (reader.readString(offset)) as P;
    case 7:
      return (reader.readObjectOrNull<ApiNotificationSettings>(
            offset,
            ApiNotificationSettingsSchema.deserialize,
            allOffsets,
          ) ??
          ApiNotificationSettings()) as P;
    case 8:
      return (reader.readString(offset)) as P;
    case 9:
      return (reader.readString(offset)) as P;
    case 10:
      return (reader.readString(offset)) as P;
    case 11:
      return (reader.readString(offset)) as P;
    case 12:
      return (reader.readString(offset)) as P;
    case 13:
      return (reader.readString(offset)) as P;
    case 14:
      return (reader.readString(offset)) as P;
    case 15:
      return (reader.readString(offset)) as P;
    case 16:
      return (reader.readString(offset)) as P;
    case 17:
      return (reader.readString(offset)) as P;
    case 18:
      return (reader.readString(offset)) as P;
    case 19:
      return (reader.readString(offset)) as P;
    case 20:
      return (reader.readString(offset)) as P;
    case 21:
      return (reader.readString(offset)) as P;
    case 22:
      return (reader.readString(offset)) as P;
    case 23:
      return (reader.readString(offset)) as P;
    case 24:
      return (reader.readString(offset)) as P;
    case 25:
      return (reader.readString(offset)) as P;
    case 26:
      return (reader.readString(offset)) as P;
    case 27:
      return (reader.readString(offset)) as P;
    case 28:
      return (reader.readString(offset)) as P;
    case 29:
      return (reader.readString(offset)) as P;
    case 30:
      return (reader.readString(offset)) as P;
    case 31:
      return (reader.readString(offset)) as P;
    case 32:
      return (reader.readString(offset)) as P;
    case 33:
      return (reader.readObjectOrNull<Details>(
        offset,
        DetailsSchema.deserialize,
        allOffsets,
      )) as P;
    case 34:
      return (reader.readString(offset)) as P;
    case 35:
      return (reader.readString(offset)) as P;
    case 36:
      return (reader.readString(offset)) as P;
    case 37:
      return (reader.readString(offset)) as P;
    case 38:
      return (reader.readString(offset)) as P;
    case 39:
      return (reader.readString(offset)) as P;
    case 40:
      return (reader.readString(offset)) as P;
    case 41:
      return (reader.readString(offset)) as P;
    case 42:
      return (reader.readString(offset)) as P;
    case 43:
      return (reader.readString(offset)) as P;
    case 44:
      return (reader.readString(offset)) as P;
    case 45:
      return (reader.readString(offset)) as P;
    case 46:
      return (reader.readString(offset)) as P;
    case 47:
      return (reader.readStringOrNull(offset)) as P;
    case 48:
      return (reader.readString(offset)) as P;
    case 49:
      return (reader.readString(offset)) as P;
    case 50:
      return (reader.readString(offset)) as P;
    case 51:
      return (reader.readStringOrNull(offset)) as P;
    case 52:
      return (reader.readString(offset)) as P;
    case 53:
      return (reader.readString(offset)) as P;
    case 54:
      return (reader.readString(offset)) as P;
    case 55:
      return (reader.readString(offset)) as P;
    case 56:
      return (reader.readString(offset)) as P;
    case 57:
      return (reader.readString(offset)) as P;
    case 58:
      return (reader.readString(offset)) as P;
    case 59:
      return (reader.readString(offset)) as P;
    case 60:
      return (reader.readString(offset)) as P;
    case 61:
      return (reader.readString(offset)) as P;
    case 62:
      return (reader.readString(offset)) as P;
    case 63:
      return (reader.readLong(offset)) as P;
    case 64:
      return (reader.readString(offset)) as P;
    case 65:
      return (reader.readLong(offset)) as P;
    case 66:
      return (reader.readBool(offset)) as P;
    case 67:
      return (reader.readLong(offset)) as P;
    case 68:
      return (reader.readBool(offset)) as P;
    case 69:
      return (reader.readLong(offset)) as P;
    case 70:
      return (reader.readString(offset)) as P;
    case 71:
      return (reader.readString(offset)) as P;
    case 72:
      return (reader.readString(offset)) as P;
    case 73:
      return (reader.readString(offset)) as P;
    case 74:
      return (reader.readString(offset)) as P;
    case 75:
      return (reader.readString(offset)) as P;
    case 76:
      return (reader.readString(offset)) as P;
    case 77:
      return (reader.readString(offset)) as P;
    case 78:
      return (reader.readString(offset)) as P;
    case 79:
      return (reader.readObjectOrNull<LastMessage>(
            offset,
            LastMessageSchema.deserialize,
            allOffsets,
          ) ??
          LastMessage()) as P;
    case 80:
      return (reader.readString(offset)) as P;
    case 81:
      return (reader.readString(offset)) as P;
    case 82:
      return (reader.readString(offset)) as P;
    case 83:
      return (reader.readString(offset)) as P;
    case 84:
      return (reader.readString(offset)) as P;
    case 85:
      return (reader.readString(offset)) as P;
    case 86:
      return (reader.readString(offset)) as P;
    case 87:
      return (reader.readString(offset)) as P;
    case 88:
      return (reader.readString(offset)) as P;
    case 89:
      return (reader.readObjectOrNull<Mute>(
            offset,
            MuteSchema.deserialize,
            allOffsets,
          ) ??
          Mute()) as P;
    case 90:
      return (reader.readString(offset)) as P;
    case 91:
      return (reader.readString(offset)) as P;
    case 92:
      return (reader.readString(offset)) as P;
    case 93:
      return (reader.readString(offset)) as P;
    case 94:
      return (reader.readString(offset)) as P;
    case 95:
      return (reader.readString(offset)) as P;
    case 96:
      return (reader.readString(offset)) as P;
    case 97:
      return (reader.readString(offset)) as P;
    case 98:
      return (reader.readStringOrNull(offset)) as P;
    case 99:
      return (reader.readString(offset)) as P;
    case 100:
      return (reader.readString(offset)) as P;
    case 101:
      return (reader.readString(offset)) as P;
    case 102:
      return (reader.readString(offset)) as P;
    case 103:
      return (reader.readString(offset)) as P;
    case 104:
      return (reader.readString(offset)) as P;
    case 105:
      return (reader.readString(offset)) as P;
    case 106:
      return (reader.readString(offset)) as P;
    case 107:
      return (reader.readString(offset)) as P;
    case 108:
      return (reader.readLong(offset)) as P;
    case 109:
      return (reader.readString(offset)) as P;
    case 110:
      return (reader.readString(offset)) as P;
    case 111:
      return (reader.readString(offset)) as P;
    case 112:
      return (reader.readString(offset)) as P;
    case 113:
      return (reader.readString(offset)) as P;
    case 114:
      return (reader.readString(offset)) as P;
    case 115:
      return (reader.readString(offset)) as P;
    case 116:
      return (reader.readString(offset)) as P;
    case 117:
      return (reader.readString(offset)) as P;
    case 118:
      return (reader.readString(offset)) as P;
    case 119:
      return (reader.readString(offset)) as P;
    case 120:
      return (reader.readString(offset)) as P;
    case 121:
      return (reader.readString(offset)) as P;
    case 122:
      return (reader.readString(offset)) as P;
    case 123:
      return (reader.readString(offset)) as P;
    case 124:
      return (reader.readString(offset)) as P;
    case 125:
      return (reader.readString(offset)) as P;
    case 126:
      return (reader.readString(offset)) as P;
    case 127:
      return (reader.readString(offset)) as P;
    case 128:
      return (reader.readString(offset)) as P;
    case 129:
      return (reader.readString(offset)) as P;
    case 130:
      return (reader.readString(offset)) as P;
    case 131:
      return (reader.readString(offset)) as P;
    case 132:
      return (reader.readString(offset)) as P;
    case 133:
      return (reader.readString(offset)) as P;
    case 134:
      return (reader.readString(offset)) as P;
    case 135:
      return (reader.readString(offset)) as P;
    case 136:
      return (reader.readString(offset)) as P;
    case 137:
      return (reader.readString(offset)) as P;
    case 138:
      return (reader.readString(offset)) as P;
    case 139:
      return (reader.readString(offset)) as P;
    case 140:
      return (reader.readStringOrNull(offset)) as P;
    case 141:
      return (reader.readString(offset)) as P;
    case 142:
      return (reader.readString(offset)) as P;
    case 143:
      return (reader.readString(offset)) as P;
    case 144:
      return (reader.readString(offset)) as P;
    case 145:
      return (reader.readString(offset)) as P;
    case 146:
      return (reader.readString(offset)) as P;
    case 147:
      return (reader.readString(offset)) as P;
    case 148:
      return (reader.readString(offset)) as P;
    case 149:
      return (reader.readString(offset)) as P;
    case 150:
      return (reader.readString(offset)) as P;
    case 151:
      return (reader.readString(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

Id _allUserChatDataGetId(AllUserChatData object) {
  return object.id;
}

List<IsarLinkBase<dynamic>> _allUserChatDataGetLinks(AllUserChatData object) {
  return [];
}

void _allUserChatDataAttach(
    IsarCollection<dynamic> col, Id id, AllUserChatData object) {}

extension AllUserChatDataQueryWhereSort
    on QueryBuilder<AllUserChatData, AllUserChatData, QWhere> {
  QueryBuilder<AllUserChatData, AllUserChatData, QAfterWhere> anyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(const IdWhereClause.any());
    });
  }
}

extension AllUserChatDataQueryWhere
    on QueryBuilder<AllUserChatData, AllUserChatData, QWhereClause> {
  QueryBuilder<AllUserChatData, AllUserChatData, QAfterWhereClause> idEqualTo(
      Id id) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IdWhereClause.between(
        lower: id,
        upper: id,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterWhereClause>
      idNotEqualTo(Id id) {
    return QueryBuilder.apply(this, (query) {
      if (query.whereSort == Sort.asc) {
        return query
            .addWhereClause(
              IdWhereClause.lessThan(upper: id, includeUpper: false),
            )
            .addWhereClause(
              IdWhereClause.greaterThan(lower: id, includeLower: false),
            );
      } else {
        return query
            .addWhereClause(
              IdWhereClause.greaterThan(lower: id, includeLower: false),
            )
            .addWhereClause(
              IdWhereClause.lessThan(upper: id, includeUpper: false),
            );
      }
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterWhereClause>
      idGreaterThan(Id id, {bool include = false}) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        IdWhereClause.greaterThan(lower: id, includeLower: include),
      );
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterWhereClause> idLessThan(
      Id id,
      {bool include = false}) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        IdWhereClause.lessThan(upper: id, includeUpper: include),
      );
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterWhereClause> idBetween(
    Id lowerId,
    Id upperId, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IdWhereClause.between(
        lower: lowerId,
        includeLower: includeLower,
        upper: upperId,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension AllUserChatDataQueryFilter
    on QueryBuilder<AllUserChatData, AllUserChatData, QFilterCondition> {
  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'about',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'about',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'about',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      aboutIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'about',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'active',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'active',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'active',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      activeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'active',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'address',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'address',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'address',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      addressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'address',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'admin',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'admin',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'admin',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      adminIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'admin',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'albumData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'albumData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'albumData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'albumData',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'albumData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'albumData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'albumData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'albumData',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'albumData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      albumDataIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'albumData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'androidMDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'androidMDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'androidMDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidMDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'androidMDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'androidNDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'androidNDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'androidNDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      androidNDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'androidNDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'authyId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'authyId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'authyId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      authyIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'authyId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'avatar',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'avatar',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatar',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'avatar',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'avatarFull',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'avatarFull',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatarFull',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarFullIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'avatarFull',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatarOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'avatarOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'avatarOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'avatarOrg',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'avatarOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'avatarOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'avatarOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'avatarOrg',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatarOrg',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      avatarOrgIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'avatarOrg',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'backgroundImage',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'backgroundImage',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'backgroundImage',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'backgroundImage',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'balance',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'balance',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'balance',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      balanceIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'balance',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'banned',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'banned',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'banned',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'banned',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'bannedReason',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'bannedReason',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bannedReason',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      bannedReasonIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'bannedReason',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bgStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'bgStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'bgStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'bgStatus',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'bgStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'bgStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'bgStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'bgStatus',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bgStatus',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      backgroundImageStatusIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'bgStatus',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'birthPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'birthPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'birthPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      birthPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'birthPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'chatId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'chatId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'chatId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'chatId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'chatId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'chatId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'chatId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'chatId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'chatId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'chatId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'chatTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'chatTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'chatTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'chatTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'chatTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'chatTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'chatTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'chatTime',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'chatTime',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTimeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'chatTime',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'chatType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'chatType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'chatType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'chatType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'chatType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'chatType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'chatType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'chatType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'chatType',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      chatTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'chatType',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'city',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'city',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'city',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cityIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'city',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'codeSent',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'codeSent',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'codeSent',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      codeSentIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'codeSent',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'confirmFollowers',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'confirmFollowers',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'confirmFollowers',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      confirmFollowersIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'confirmFollowers',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'convertedPoints',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'convertedPoints',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'convertedPoints',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      convertedPointsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'convertedPoints',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'countryId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'countryId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'countryId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      countryIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'countryId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'cover',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'cover',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'cover',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'cover',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'coverFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'coverFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'coverFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'coverFull',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'coverFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'coverFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'coverFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'coverFull',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'coverFull',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverFullIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'coverFull',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'coverOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'coverOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'coverOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'coverOrg',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'coverOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'coverOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'coverOrg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'coverOrg',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'coverOrg',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      coverOrgIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'coverOrg',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'credits',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'credits',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'credits',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      creditsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'credits',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'cssFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'cssFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'cssFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'cssFile',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'cssFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'cssFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'cssFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'cssFile',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'cssFile',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      cssFileIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'cssFile',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'currentlyWorking',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'currentlyWorking',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currentlyWorking',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      currentlyWorkingIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'currentlyWorking',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'dailyPoints',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'dailyPoints',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'dailyPoints',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      dailyPointsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'dailyPoints',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      detailsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'details',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      detailsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'details',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eAccepted',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eAccepted',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eAccepted',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eAcceptedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eAccepted',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eCommented',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eCommented',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eCommented',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eCommentedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eCommented',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eFollowed',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eFollowed',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eFollowed',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eFollowedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eFollowed',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eJoinedGroup',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eJoinedGroup',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eJoinedGroup',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eJoinedGroupIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eJoinedGroup',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eLastNotif',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eLastNotif',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLastNotif',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLastNotifIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eLastNotif',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eLiked',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eLiked',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLiked',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eLiked',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eLikedPage',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eLikedPage',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLikedPage',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eLikedPageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eLikedPage',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eMentioned',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eMentioned',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eMentioned',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eMentionedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eMentioned',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eProfileWallPost',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eProfileWallPost',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eProfileWallPost',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eProfileWallPostIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eProfileWallPost',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eSentmeMsg',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eSentmeMsg',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eSentmeMsg',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSentmeMsgIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eSentmeMsg',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eShared',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eShared',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eShared',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eSharedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eShared',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eVisited',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eVisited',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eVisited',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eVisitedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eVisited',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eWondered',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eWondered',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eWondered',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      eWonderedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eWondered',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'email',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'email',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'email',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'email',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'email',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'email',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emailCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'emailCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'emailCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'emailCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'emailCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'emailCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'emailCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'emailCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emailCode',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'emailCode',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'emailNotification',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'emailNotification',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emailNotification',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      emailNotificationIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'emailNotification',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'facebook',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'facebook',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'facebook',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      facebookIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'facebook',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'firstName',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'firstName',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'firstName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'firstName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'firstName',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      firstNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'firstName',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'followPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'followPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'followPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      followPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'followPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'friendPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'friendPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'friendPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      friendPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'friendPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fromServerId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'fromServerId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'fromServerId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'fromServerId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'fromServerId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'fromServerId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'fromServerId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'fromServerId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fromServerId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      fromServerIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'fromServerId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'gender',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'gender',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'gender',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      genderIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'gender',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'google',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'google',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'google',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'google',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'googleSecret',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'googleSecret',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googleSecret',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      googleSecretIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'googleSecret',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      idEqualTo(Id value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      idGreaterThan(
    Id value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      idLessThan(
    Id value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      idBetween(
    Id lower,
    Id upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'infoFile',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'infoFile',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'infoFile',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      infoFileIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'infoFile',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'instagram',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'instagram',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'instagram',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      instagramIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'instagram',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'iosMDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'iosMDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'iosMDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosMDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'iosMDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'iosNDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'iosNDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'iosNDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      iosNDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'iosNDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'ipAddress',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'ipAddress',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'ipAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      ipAddressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'ipAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isOpenToWorkEqualTo(int value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isOpenToWork',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isOpenToWorkGreaterThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isOpenToWork',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isOpenToWorkLessThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isOpenToWork',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isOpenToWorkBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isOpenToWork',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isPro',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'isPro',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isPro',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'isPro',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProvidingServiceEqualTo(int value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isProvidingService',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProvidingServiceGreaterThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isProvidingService',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProvidingServiceLessThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isProvidingService',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isProvidingServiceBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isProvidingService',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isReportedEqualTo(bool value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isReported',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isReportedUserEqualTo(int value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isReportedUser',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isReportedUserGreaterThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isReportedUser',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isReportedUserLessThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isReportedUser',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isReportedUserBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isReportedUser',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isStoryMutedEqualTo(bool value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isStoryMuted',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isVerifiedEqualTo(int value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isVerified',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isVerifiedGreaterThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isVerified',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isVerifiedLessThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isVerified',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      isVerifiedBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isVerified',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'joined',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'joined',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'joined',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'joined',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'joined',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'joined',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'joined',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'joined',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'joined',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      joinedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'joined',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'language',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'language',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'language',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      languageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'language',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastAvatarMod',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastAvatarMod',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastAvatarMod',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastAvatarModIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastAvatarMod',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastCoverMod',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastCoverMod',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastCoverMod',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastCoverModIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastCoverMod',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastDataUpdate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastDataUpdate',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastDataUpdate',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastDataUpdateIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastDataUpdate',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastEmailSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastEmailSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastEmailSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastEmailSent',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastEmailSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastEmailSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastEmailSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastEmailSent',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastEmailSent',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastEmailSentIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastEmailSent',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastFollowId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastFollowId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastFollowId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastFollowIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastFollowId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastLocationUpdate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastLocationUpdate',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastLocationUpdate',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLocationUpdateIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastLocationUpdate',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastLoginData',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastLoginData',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastLoginData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastLoginDataIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastLoginData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastName',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastName',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastseen',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastseen',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseen',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastseen',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastseenStatus',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastseenStatus',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseenStatus',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenStatusIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastseenStatus',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastseenUnixTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastseenUnixTime',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseenUnixTime',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastseenUnixTimeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastseenUnixTime',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lat',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lat',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lat',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      latIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lat',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'linkedin',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'linkedin',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'linkedin',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      linkedinIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'linkedin',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lng',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lng',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lng',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lngIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lng',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'messageCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'messageCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'messageCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'messageCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'messageCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'messageCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'messageCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'messageCount',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'messageCount',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messageCountIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'messageCount',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'messagePrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'messagePrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'messagePrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      messagePrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'messagePrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'name',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'name',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'newEmail',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'newEmail',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'newEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newEmailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'newEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'newPhone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'newPhone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'newPhone',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      newPhoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'newPhone',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notificationSettings',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'notificationSettings',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationSettings',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationSettingsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'notificationSettings',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notificationsSound',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'notificationsSound',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationsSound',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      notificationsSoundIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'notificationsSound',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'okru',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'okru',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'okru',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      okruIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'okru',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'openToWorkData',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'openToWorkData',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'openToWorkData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      openToWorkDataIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'openToWorkData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'orderPostsBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'orderPostsBy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'orderPostsBy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      orderPostsByIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'orderPostsBy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'password',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'password',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'password',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'password',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'password',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'password',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      passwordIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'password',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'paypalEmail',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'paypalEmail',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paypalEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paypalEmailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'paypalEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'paystackRef',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'paystackRef',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paystackRef',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      paystackRefIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'paystackRef',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'phoneNumber',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'phoneNumber',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'phoneNumber',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      phoneNumberIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'phoneNumber',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'pointDayExpire',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'pointDayExpire',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pointDayExpire',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointDayExpireIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'pointDayExpire',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'points',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'points',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'points',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      pointsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'points',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'postPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'postPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'postPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      postPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'postPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'proRemainder',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'proRemainder',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proRemainder',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proRemainderIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'proRemainder',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'proTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'proTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'proTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'proTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'proTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'proTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'proTime',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proTime',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTimeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'proTime',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'proType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'proType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proType',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      proTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'proType',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      providingServiceEqualTo(int value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'providingService',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      providingServiceGreaterThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'providingService',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      providingServiceLessThan(
    int value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'providingService',
        value: value,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      providingServiceBetween(
    int lower,
    int upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'providingService',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'refUserId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'refUserId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'refUserId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      refUserIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'refUserId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'referrer',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'referrer',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'referrer',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      referrerIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'referrer',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'registered',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'registered',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'registered',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      registeredIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'registered',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'relationshipId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'relationshipId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'relationshipId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      relationshipIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'relationshipId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'school',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'school',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'school',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'school',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'schoolCompleted',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'schoolCompleted',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'schoolCompleted',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      schoolCompletedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'schoolCompleted',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'shareMyData',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'shareMyData',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'shareMyData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyDataIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'shareMyData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'shareMyLocation',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'shareMyLocation',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'shareMyLocation',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      shareMyLocationIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'shareMyLocation',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'showActivitiesPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'showActivitiesPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showActivitiesPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showActivitiesPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'showActivitiesPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showlastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'showlastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'showlastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'showlastseen',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'showlastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'showlastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'showlastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'showlastseen',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showlastseen',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      showlastseenIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'showlastseen',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sidebarData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'sidebarData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'sidebarData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'sidebarData',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'sidebarData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'sidebarData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'sidebarData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'sidebarData',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sidebarData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      sidebarDataIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'sidebarData',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smsCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'smsCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'smsCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'smsCode',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'smsCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'smsCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'smsCode',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'smsCode',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'smsCode',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      smsCodeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'smsCode',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'socialLogin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'socialLogin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'socialLogin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'socialLogin',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'socialLogin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'socialLogin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'socialLogin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'socialLogin',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'socialLogin',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      socialLoginIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'socialLogin',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'src',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'src',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'src',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'src',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'src',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'src',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'src',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'src',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'src',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      srcIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'src',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startUp',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'startUp',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'startUp',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'startUp',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'startUp',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'startUp',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'startUp',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'startUp',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startUp',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'startUp',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startUpInfo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'startUpInfo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'startUpInfo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'startUpInfo',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'startUpInfo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'startUpInfo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'startUpInfo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'startUpInfo',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startUpInfo',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startUpInfoIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'startUpInfo',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startupFollow',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'startupFollow',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'startupFollow',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'startupFollow',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'startupFollow',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'startupFollow',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'startupFollow',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'startupFollow',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startupFollow',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupFollowIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'startupFollow',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startupImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'startupImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'startupImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'startupImage',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'startupImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'startupImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'startupImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'startupImage',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'startupImage',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      startupImageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'startupImage',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'state',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'state',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'state',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      stateIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'state',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'status',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'status',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'status',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      statusIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'status',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'timeCodeSent',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'timeCodeSent',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timeCodeSent',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timeCodeSentIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'timeCodeSent',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'timezone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'timezone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timezone',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      timezoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'timezone',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twitter',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twitter',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twitter',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twitterIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twitter',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twoFactor',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twoFactor',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactor',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twoFactor',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twoFactorHash',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twoFactorHash',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorHash',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorHashIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twoFactorHash',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twoFactorMethod',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twoFactorMethod',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorMethod',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorMethodIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twoFactorMethod',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twoFactorVerified',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twoFactorVerified',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorVerified',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      twoFactorVerifiedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twoFactorVerified',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'type',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'type',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      typeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'url',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'url',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'url',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      urlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'url',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'userId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'userId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'userId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'userId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'userId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'userId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'userId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'userId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'userId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'userId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'userPlatform',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'userPlatform',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'userPlatform',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      userPlatformIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'userPlatform',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'username',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'username',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'username',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'username',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'username',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      usernameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'username',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'verified',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'verified',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'verified',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      verifiedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'verified',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'visitPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'visitPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'visitPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      visitPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'visitPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'vk',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'vk',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'vk',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      vkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'vk',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'wallet',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'wallet',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wallet',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      walletIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'wallet',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'weatherUnit',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'weatherUnit',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'weatherUnit',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      weatherUnitIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'weatherUnit',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'webDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'webDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'webDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      webDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'webDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'website',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'website',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'website',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      websiteIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'website',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'working',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'working',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'working',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'working',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'workingLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'workingLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'workingLink',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      workingLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'workingLink',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'youtube',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'youtube',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'youtube',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      youtubeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'youtube',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipGreaterThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipLessThan(
    String value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipBetween(
    String lower,
    String upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'zip',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'zip',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'zip',
        value: '',
      ));
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      zipIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'zip',
        value: '',
      ));
    });
  }
}

extension AllUserChatDataQueryObject
    on QueryBuilder<AllUserChatData, AllUserChatData, QFilterCondition> {
  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      apiNotificationSettings(FilterQuery<ApiNotificationSettings> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'apiNotificationSettings');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition> details(
      FilterQuery<Details> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'details');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition>
      lastMessage(FilterQuery<LastMessage> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'lastMessage');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterFilterCondition> mute(
      FilterQuery<Mute> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'mute');
    });
  }
}

extension AllUserChatDataQueryLinks
    on QueryBuilder<AllUserChatData, AllUserChatData, QFilterCondition> {}

extension AllUserChatDataQuerySortBy
    on QueryBuilder<AllUserChatData, AllUserChatData, QSortBy> {
  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByAbout() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'about', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAboutDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'about', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByActive() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'active', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByActiveDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'active', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'address', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'address', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByAdmin() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'admin', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAdminDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'admin', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAlbumData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'albumData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAlbumDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'albumData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAndroidMDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'androidMDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAndroidMDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'androidMDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAndroidNDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'androidNDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAndroidNDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'androidNDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByAuthyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'authyId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAuthyIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'authyId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByAvatar() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatar', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAvatarDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatar', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAvatarFull() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatarFull', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAvatarFullDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatarFull', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAvatarOrg() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatarOrg', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByAvatarOrgDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatarOrg', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBackgroundImage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'backgroundImage', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBackgroundImageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'backgroundImage', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByBalance() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'balance', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBalanceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'balance', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByBanned() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'banned', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBannedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'banned', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBannedReason() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bannedReason', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBannedReasonDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bannedReason', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBackgroundImageStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bgStatus', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBackgroundImageStatusDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bgStatus', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBirthPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'birthPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByBirthPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'birthPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByChatId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByChatIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByChatTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatTime', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByChatTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatTime', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByChatType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatType', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByChatTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatType', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByCity() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'city', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCityDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'city', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCodeSent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'codeSent', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCodeSentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'codeSent', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByConfirmFollowers() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'confirmFollowers', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByConfirmFollowersDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'confirmFollowers', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByConvertedPoints() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'convertedPoints', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByConvertedPointsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'convertedPoints', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCountryId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'countryId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCountryIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'countryId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByCover() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'cover', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCoverDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'cover', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCoverFull() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'coverFull', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCoverFullDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'coverFull', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCoverOrg() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'coverOrg', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCoverOrgDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'coverOrg', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByCredits() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'credits', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCreditsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'credits', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByCssFile() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'cssFile', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCssFileDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'cssFile', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCurrentlyWorking() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'currentlyWorking', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByCurrentlyWorkingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'currentlyWorking', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByDailyPoints() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'dailyPoints', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByDailyPointsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'dailyPoints', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEAccepted() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eAccepted', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEAcceptedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eAccepted', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByECommented() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eCommented', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByECommentedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eCommented', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEFollowed() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eFollowed', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEFollowedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eFollowed', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEJoinedGroup() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eJoinedGroup', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEJoinedGroupDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eJoinedGroup', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByELastNotif() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLastNotif', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByELastNotifDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLastNotif', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByELiked() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLiked', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByELikedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLiked', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByELikedPage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLikedPage', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByELikedPageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLikedPage', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEMentioned() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eMentioned', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEMentionedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eMentioned', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEProfileWallPost() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eProfileWallPost', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEProfileWallPostDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eProfileWallPost', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByESentmeMsg() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eSentmeMsg', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByESentmeMsgDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eSentmeMsg', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByEShared() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eShared', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByESharedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eShared', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEVisited() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eVisited', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEVisitedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eVisited', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEWondered() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eWondered', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEWonderedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eWondered', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'email', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'email', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEmailCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'emailCode', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEmailCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'emailCode', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEmailNotification() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'emailNotification', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByEmailNotificationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'emailNotification', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFacebook() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'facebook', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFacebookDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'facebook', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFirstName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firstName', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFirstNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firstName', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFollowPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'followPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFollowPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'followPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFriendPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'friendPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFriendPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'friendPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFromServerId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'fromServerId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByFromServerIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'fromServerId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByGender() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'gender', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByGenderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'gender', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByGoogle() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'google', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByGoogleDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'google', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByGoogleSecret() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleSecret', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByGoogleSecretDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleSecret', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByInfoFile() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'infoFile', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByInfoFileDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'infoFile', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByInstagram() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'instagram', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByInstagramDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'instagram', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIosMDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'iosMDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIosMDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'iosMDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIosNDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'iosNDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIosNDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'iosNDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIpAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'ipAddress', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIpAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'ipAddress', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsOpenToWork() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isOpenToWork', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsOpenToWorkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isOpenToWork', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByIsPro() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isPro', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsProDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isPro', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsProvidingService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isProvidingService', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsProvidingServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isProvidingService', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsReported() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isReported', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsReportedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isReported', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsReportedUser() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isReportedUser', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsReportedUserDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isReportedUser', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsStoryMuted() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isStoryMuted', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsStoryMutedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isStoryMuted', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsVerified() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isVerified', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByIsVerifiedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isVerified', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByJoined() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'joined', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByJoinedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'joined', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLanguage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'language', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLanguageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'language', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastAvatarMod() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastAvatarMod', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastAvatarModDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastAvatarMod', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastCoverMod() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastCoverMod', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastCoverModDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastCoverMod', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastDataUpdate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastDataUpdate', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastDataUpdateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastDataUpdate', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastEmailSent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastEmailSent', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastEmailSentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastEmailSent', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastFollowId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastFollowId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastFollowIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastFollowId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastLocationUpdate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastLocationUpdate', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastLocationUpdateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastLocationUpdate', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastLoginData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastLoginData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastLoginDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastLoginData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastName', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastName', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastseen() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseen', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastseenDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseen', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastseenStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseenStatus', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastseenStatusDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseenStatus', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastseenUnixTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseenUnixTime', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLastseenUnixTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseenUnixTime', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByLat() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lat', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByLatDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lat', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLinkedin() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'linkedin', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByLinkedinDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'linkedin', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByLng() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lng', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByLngDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lng', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByMessageCount() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messageCount', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByMessageCountDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messageCount', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByMessagePrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messagePrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByMessagePrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messagePrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'name', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'name', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNewEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'newEmail', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNewEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'newEmail', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNewPhone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'newPhone', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNewPhoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'newPhone', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNotificationSettings() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationSettings', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNotificationSettingsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationSettings', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNotificationsSound() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationsSound', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByNotificationsSoundDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationsSound', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByOkru() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'okru', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByOkruDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'okru', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByOpenToWorkData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openToWorkData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByOpenToWorkDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openToWorkData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByOrderPostsBy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'orderPostsBy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByOrderPostsByDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'orderPostsBy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPassword() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'password', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPasswordDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'password', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPaypalEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'paypalEmail', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPaypalEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'paypalEmail', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPaystackRef() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'paystackRef', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPaystackRefDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'paystackRef', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPhoneNumber() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'phoneNumber', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPhoneNumberDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'phoneNumber', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPointDayExpire() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'pointDayExpire', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPointDayExpireDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'pointDayExpire', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByPoints() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'points', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPointsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'points', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPostPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'postPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByPostPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'postPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByProRemainder() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proRemainder', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByProRemainderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proRemainder', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByProTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proTime', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByProTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proTime', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByProType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proType', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByProTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proType', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByProvidingService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'providingService', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByProvidingServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'providingService', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByRefUserId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'refUserId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByRefUserIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'refUserId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByReferrer() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'referrer', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByReferrerDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'referrer', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByRegistered() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'registered', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByRegisteredDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'registered', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByRelationshipId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'relationshipId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByRelationshipIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'relationshipId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortBySchool() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'school', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortBySchoolDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'school', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortBySchoolCompleted() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'schoolCompleted', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortBySchoolCompletedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'schoolCompleted', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByShareMyData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'shareMyData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByShareMyDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'shareMyData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByShareMyLocation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'shareMyLocation', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByShareMyLocationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'shareMyLocation', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByShowActivitiesPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showActivitiesPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByShowActivitiesPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showActivitiesPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByShowlastseen() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showlastseen', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByShowlastseenDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showlastseen', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortBySidebarData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'sidebarData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortBySidebarDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'sidebarData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortBySmsCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smsCode', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortBySmsCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smsCode', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortBySocialLogin() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'socialLogin', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortBySocialLoginDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'socialLogin', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortBySrc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'src', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortBySrcDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'src', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByStartUp() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startUp', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStartUpDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startUp', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStartUpInfo() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startUpInfo', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStartUpInfoDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startUpInfo', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStartupFollow() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startupFollow', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStartupFollowDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startupFollow', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStartupImage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startupImage', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStartupImageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startupImage', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByState() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'state', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'state', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'status', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByStatusDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'status', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTimeCodeSent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timeCodeSent', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTimeCodeSentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timeCodeSent', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTimezone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timezone', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTimezoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timezone', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByTwitter() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twitter', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwitterDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twitter', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwoFactor() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactor', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwoFactorDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactor', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwoFactorHash() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorHash', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwoFactorHashDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorHash', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwoFactorMethod() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorMethod', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwoFactorMethodDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorMethod', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwoFactorVerified() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorVerified', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTwoFactorVerifiedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorVerified', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'type', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'type', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'url', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'url', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByUserId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'userId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByUserIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'userId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByUserPlatform() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'userPlatform', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByUserPlatformDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'userPlatform', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByUsername() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'username', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByUsernameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'username', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByVerified() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'verified', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByVerifiedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'verified', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByVisitPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'visitPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByVisitPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'visitPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByVk() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'vk', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByVkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'vk', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByWallet() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wallet', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWalletDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wallet', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWeatherUnit() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'weatherUnit', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWeatherUnitDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'weatherUnit', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWebDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'webDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWebDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'webDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByWebsite() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'website', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWebsiteDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'website', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByWorking() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'working', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWorkingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'working', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWorkingLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'workingLink', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByWorkingLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'workingLink', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByYoutube() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'youtube', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      sortByYoutubeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'youtube', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByZip() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'zip', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> sortByZipDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'zip', Sort.desc);
    });
  }
}

extension AllUserChatDataQuerySortThenBy
    on QueryBuilder<AllUserChatData, AllUserChatData, QSortThenBy> {
  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByAbout() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'about', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAboutDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'about', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByActive() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'active', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByActiveDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'active', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'address', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'address', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByAdmin() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'admin', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAdminDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'admin', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAlbumData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'albumData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAlbumDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'albumData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAndroidMDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'androidMDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAndroidMDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'androidMDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAndroidNDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'androidNDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAndroidNDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'androidNDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByAuthyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'authyId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAuthyIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'authyId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByAvatar() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatar', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAvatarDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatar', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAvatarFull() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatarFull', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAvatarFullDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatarFull', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAvatarOrg() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatarOrg', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByAvatarOrgDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'avatarOrg', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBackgroundImage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'backgroundImage', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBackgroundImageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'backgroundImage', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByBalance() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'balance', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBalanceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'balance', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByBanned() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'banned', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBannedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'banned', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBannedReason() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bannedReason', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBannedReasonDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bannedReason', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBackgroundImageStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bgStatus', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBackgroundImageStatusDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'bgStatus', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBirthPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'birthPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByBirthPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'birthPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByChatId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByChatIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByChatTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatTime', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByChatTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatTime', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByChatType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatType', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByChatTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'chatType', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByCity() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'city', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCityDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'city', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCodeSent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'codeSent', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCodeSentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'codeSent', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByConfirmFollowers() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'confirmFollowers', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByConfirmFollowersDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'confirmFollowers', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByConvertedPoints() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'convertedPoints', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByConvertedPointsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'convertedPoints', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCountryId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'countryId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCountryIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'countryId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByCover() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'cover', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCoverDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'cover', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCoverFull() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'coverFull', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCoverFullDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'coverFull', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCoverOrg() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'coverOrg', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCoverOrgDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'coverOrg', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByCredits() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'credits', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCreditsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'credits', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByCssFile() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'cssFile', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCssFileDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'cssFile', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCurrentlyWorking() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'currentlyWorking', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByCurrentlyWorkingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'currentlyWorking', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByDailyPoints() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'dailyPoints', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByDailyPointsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'dailyPoints', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEAccepted() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eAccepted', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEAcceptedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eAccepted', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByECommented() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eCommented', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByECommentedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eCommented', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEFollowed() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eFollowed', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEFollowedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eFollowed', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEJoinedGroup() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eJoinedGroup', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEJoinedGroupDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eJoinedGroup', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByELastNotif() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLastNotif', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByELastNotifDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLastNotif', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByELiked() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLiked', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByELikedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLiked', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByELikedPage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLikedPage', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByELikedPageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eLikedPage', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEMentioned() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eMentioned', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEMentionedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eMentioned', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEProfileWallPost() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eProfileWallPost', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEProfileWallPostDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eProfileWallPost', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByESentmeMsg() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eSentmeMsg', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByESentmeMsgDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eSentmeMsg', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByEShared() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eShared', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByESharedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eShared', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEVisited() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eVisited', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEVisitedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eVisited', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEWondered() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eWondered', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEWonderedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'eWondered', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'email', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'email', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEmailCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'emailCode', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEmailCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'emailCode', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEmailNotification() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'emailNotification', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByEmailNotificationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'emailNotification', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFacebook() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'facebook', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFacebookDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'facebook', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFirstName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firstName', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFirstNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'firstName', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFollowPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'followPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFollowPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'followPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFriendPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'friendPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFriendPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'friendPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFromServerId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'fromServerId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByFromServerIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'fromServerId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByGender() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'gender', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByGenderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'gender', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByGoogle() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'google', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByGoogleDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'google', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByGoogleSecret() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleSecret', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByGoogleSecretDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'googleSecret', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'id', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'id', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByInfoFile() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'infoFile', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByInfoFileDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'infoFile', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByInstagram() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'instagram', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByInstagramDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'instagram', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIosMDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'iosMDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIosMDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'iosMDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIosNDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'iosNDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIosNDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'iosNDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIpAddress() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'ipAddress', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIpAddressDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'ipAddress', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsOpenToWork() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isOpenToWork', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsOpenToWorkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isOpenToWork', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByIsPro() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isPro', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsProDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isPro', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsProvidingService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isProvidingService', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsProvidingServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isProvidingService', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsReported() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isReported', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsReportedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isReported', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsReportedUser() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isReportedUser', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsReportedUserDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isReportedUser', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsStoryMuted() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isStoryMuted', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsStoryMutedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isStoryMuted', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsVerified() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isVerified', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByIsVerifiedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'isVerified', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByJoined() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'joined', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByJoinedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'joined', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLanguage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'language', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLanguageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'language', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastAvatarMod() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastAvatarMod', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastAvatarModDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastAvatarMod', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastCoverMod() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastCoverMod', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastCoverModDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastCoverMod', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastDataUpdate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastDataUpdate', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastDataUpdateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastDataUpdate', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastEmailSent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastEmailSent', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastEmailSentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastEmailSent', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastFollowId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastFollowId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastFollowIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastFollowId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastLocationUpdate() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastLocationUpdate', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastLocationUpdateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastLocationUpdate', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastLoginData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastLoginData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastLoginDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastLoginData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastName', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastName', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastseen() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseen', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastseenDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseen', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastseenStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseenStatus', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastseenStatusDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseenStatus', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastseenUnixTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseenUnixTime', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLastseenUnixTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastseenUnixTime', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByLat() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lat', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByLatDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lat', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLinkedin() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'linkedin', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByLinkedinDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'linkedin', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByLng() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lng', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByLngDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lng', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByMessageCount() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messageCount', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByMessageCountDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messageCount', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByMessagePrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messagePrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByMessagePrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'messagePrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByName() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'name', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'name', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNewEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'newEmail', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNewEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'newEmail', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNewPhone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'newPhone', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNewPhoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'newPhone', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNotificationSettings() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationSettings', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNotificationSettingsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationSettings', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNotificationsSound() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationsSound', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByNotificationsSoundDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'notificationsSound', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByOkru() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'okru', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByOkruDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'okru', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByOpenToWorkData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openToWorkData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByOpenToWorkDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'openToWorkData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByOrderPostsBy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'orderPostsBy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByOrderPostsByDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'orderPostsBy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPassword() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'password', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPasswordDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'password', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPaypalEmail() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'paypalEmail', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPaypalEmailDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'paypalEmail', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPaystackRef() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'paystackRef', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPaystackRefDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'paystackRef', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPhoneNumber() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'phoneNumber', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPhoneNumberDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'phoneNumber', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPointDayExpire() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'pointDayExpire', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPointDayExpireDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'pointDayExpire', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByPoints() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'points', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPointsDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'points', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPostPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'postPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByPostPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'postPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByProRemainder() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proRemainder', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByProRemainderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proRemainder', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByProTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proTime', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByProTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proTime', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByProType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proType', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByProTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'proType', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByProvidingService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'providingService', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByProvidingServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'providingService', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByRefUserId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'refUserId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByRefUserIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'refUserId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByReferrer() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'referrer', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByReferrerDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'referrer', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByRegistered() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'registered', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByRegisteredDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'registered', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByRelationshipId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'relationshipId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByRelationshipIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'relationshipId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenBySchool() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'school', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenBySchoolDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'school', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenBySchoolCompleted() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'schoolCompleted', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenBySchoolCompletedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'schoolCompleted', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByShareMyData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'shareMyData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByShareMyDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'shareMyData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByShareMyLocation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'shareMyLocation', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByShareMyLocationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'shareMyLocation', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByShowActivitiesPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showActivitiesPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByShowActivitiesPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showActivitiesPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByShowlastseen() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showlastseen', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByShowlastseenDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'showlastseen', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenBySidebarData() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'sidebarData', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenBySidebarDataDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'sidebarData', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenBySmsCode() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smsCode', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenBySmsCodeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'smsCode', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenBySocialLogin() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'socialLogin', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenBySocialLoginDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'socialLogin', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenBySrc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'src', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenBySrcDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'src', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByStartUp() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startUp', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStartUpDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startUp', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStartUpInfo() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startUpInfo', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStartUpInfoDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startUpInfo', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStartupFollow() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startupFollow', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStartupFollowDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startupFollow', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStartupImage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startupImage', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStartupImageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'startupImage', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByState() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'state', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStateDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'state', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'status', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByStatusDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'status', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTimeCodeSent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timeCodeSent', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTimeCodeSentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timeCodeSent', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTimezone() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timezone', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTimezoneDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'timezone', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByTwitter() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twitter', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwitterDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twitter', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwoFactor() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactor', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwoFactorDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactor', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwoFactorHash() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorHash', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwoFactorHashDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorHash', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwoFactorMethod() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorMethod', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwoFactorMethodDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorMethod', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwoFactorVerified() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorVerified', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTwoFactorVerifiedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'twoFactorVerified', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByType() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'type', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByTypeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'type', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByUrl() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'url', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByUrlDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'url', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByUserId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'userId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByUserIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'userId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByUserPlatform() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'userPlatform', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByUserPlatformDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'userPlatform', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByUsername() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'username', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByUsernameDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'username', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByVerified() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'verified', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByVerifiedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'verified', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByVisitPrivacy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'visitPrivacy', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByVisitPrivacyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'visitPrivacy', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByVk() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'vk', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByVkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'vk', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByWallet() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wallet', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWalletDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'wallet', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWeatherUnit() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'weatherUnit', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWeatherUnitDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'weatherUnit', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWebDeviceId() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'webDeviceId', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWebDeviceIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'webDeviceId', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByWebsite() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'website', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWebsiteDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'website', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByWorking() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'working', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWorkingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'working', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWorkingLink() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'workingLink', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByWorkingLinkDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'workingLink', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByYoutube() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'youtube', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy>
      thenByYoutubeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'youtube', Sort.desc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByZip() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'zip', Sort.asc);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QAfterSortBy> thenByZipDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'zip', Sort.desc);
    });
  }
}

extension AllUserChatDataQueryWhereDistinct
    on QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> {
  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByAbout(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'about', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByActive(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'active', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByAddress(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'address', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByAdmin(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'admin', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByAlbumData(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'albumData', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByAndroidMDeviceId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'androidMDeviceId',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByAndroidNDeviceId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'androidNDeviceId',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByAuthyId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'authyId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByAvatar(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'avatar', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByAvatarFull({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'avatarFull', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByAvatarOrg(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'avatarOrg', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByBackgroundImage({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'backgroundImage',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByBalance(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'balance', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByBanned(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'banned', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByBannedReason({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'bannedReason', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByBackgroundImageStatus({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'bgStatus', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByBirthPrivacy({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'birthPrivacy', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByChatId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'chatId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByChatTime(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'chatTime', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByChatType(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'chatType', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByCity(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'city', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByCodeSent(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'codeSent', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByConfirmFollowers({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'confirmFollowers',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByConvertedPoints({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'convertedPoints',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByCountryId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'countryId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByCover(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'cover', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByCoverFull(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'coverFull', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByCoverOrg(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'coverOrg', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByCredits(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'credits', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByCssFile(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'cssFile', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByCurrentlyWorking({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'currentlyWorking',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByDailyPoints({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'dailyPoints', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByEAccepted(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eAccepted', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByECommented({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eCommented', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByEFollowed(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eFollowed', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByEJoinedGroup({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eJoinedGroup', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByELastNotif({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eLastNotif', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByELiked(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eLiked', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByELikedPage({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eLikedPage', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByEMentioned({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eMentioned', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByEProfileWallPost({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eProfileWallPost',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByESentmeMsg({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eSentmeMsg', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByEShared(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eShared', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByEVisited(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eVisited', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByEWondered(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'eWondered', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByEmail(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'email', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByEmailCode(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'emailCode', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByEmailNotification({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'emailNotification',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByFacebook(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'facebook', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByFirstName(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'firstName', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByFollowPrivacy({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'followPrivacy',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByFriendPrivacy({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'friendPrivacy',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByFromServerId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'fromServerId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByGender(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'gender', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByGoogle(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'google', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByGoogleSecret({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'googleSecret', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByInfoFile(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'infoFile', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByInstagram(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'instagram', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByIosMDeviceId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'iosMDeviceId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByIosNDeviceId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'iosNDeviceId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByIpAddress(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'ipAddress', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByIsOpenToWork() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isOpenToWork');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByIsPro(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isPro', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByIsProvidingService() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isProvidingService');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByIsReported() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isReported');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByIsReportedUser() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isReportedUser');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByIsStoryMuted() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isStoryMuted');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByIsVerified() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'isVerified');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByJoined(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'joined', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByLanguage(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'language', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastAvatarMod({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastAvatarMod',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastCoverMod({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastCoverMod', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastDataUpdate({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastDataUpdate',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastEmailSent({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastEmailSent',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastFollowId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastFollowId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastLocationUpdate({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastLocationUpdate',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastLoginData({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastLoginData',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByLastName(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastName', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByLastseen(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastseen', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastseenStatus({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastseenStatus',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByLastseenUnixTime({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastseenUnixTime',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByLat(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lat', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByLinkedin(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'linkedin', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByLng(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lng', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByMessageCount({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'messageCount', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByMessagePrivacy({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'messagePrivacy',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByName(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'name', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByNewEmail(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'newEmail', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByNewPhone(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'newPhone', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByNotificationSettings({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'notificationSettings',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByNotificationsSound({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'notificationsSound',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByOkru(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'okru', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByOpenToWorkData({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'openToWorkData',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByOrderPostsBy({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'orderPostsBy', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByPassword(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'password', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByPaypalEmail({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'paypalEmail', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByPaystackRef({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'paystackRef', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByPhoneNumber({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'phoneNumber', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByPointDayExpire({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'pointDayExpire',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByPoints(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'points', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByPostPrivacy({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'postPrivacy', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByProRemainder({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'proRemainder', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByProTime(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'proTime', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByProType(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'proType', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByProvidingService() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'providingService');
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByRefUserId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'refUserId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByReferrer(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'referrer', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByRegistered({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'registered', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByRelationshipId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'relationshipId',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctBySchool(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'school', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctBySchoolCompleted({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'schoolCompleted',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByShareMyData({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'shareMyData', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByShareMyLocation({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'shareMyLocation',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByShowActivitiesPrivacy({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'showActivitiesPrivacy',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByShowlastseen({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'showlastseen', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctBySidebarData({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'sidebarData', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctBySmsCode(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'smsCode', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctBySocialLogin({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'socialLogin', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctBySrc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'src', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByStartUp(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'startUp', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByStartUpInfo({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'startUpInfo', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByStartupFollow({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'startupFollow',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByStartupImage({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'startupImage', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByState(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'state', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByStatus(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'status', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByTimeCodeSent({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'timeCodeSent', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByTimezone(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'timezone', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByTwitter(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'twitter', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByTwoFactor(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'twoFactor', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByTwoFactorHash({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'twoFactorHash',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByTwoFactorMethod({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'twoFactorMethod',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByTwoFactorVerified({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'twoFactorVerified',
          caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByType(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'type', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByUrl(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'url', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByUserId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'userId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByUserPlatform({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'userPlatform', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByUsername(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'username', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByVerified(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'verified', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByVisitPrivacy({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'visitPrivacy', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByVk(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'vk', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByWallet(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'wallet', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByWeatherUnit({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'weatherUnit', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByWebDeviceId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'webDeviceId', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByWebsite(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'website', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByWorking(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'working', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct>
      distinctByWorkingLink({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'workingLink', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByYoutube(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'youtube', caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<AllUserChatData, AllUserChatData, QDistinct> distinctByZip(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'zip', caseSensitive: caseSensitive);
    });
  }
}

extension AllUserChatDataQueryProperty
    on QueryBuilder<AllUserChatData, AllUserChatData, QQueryProperty> {
  QueryBuilder<AllUserChatData, int, QQueryOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'id');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> aboutProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'about');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> activeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'active');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> addressProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'address');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> adminProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'admin');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> albumDataProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'albumData');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      androidMDeviceIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'androidMDeviceId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      androidNDeviceIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'androidNDeviceId');
    });
  }

  QueryBuilder<AllUserChatData, ApiNotificationSettings, QQueryOperations>
      apiNotificationSettingsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'apiNotificationSettings');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> authyIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'authyId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> avatarProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'avatar');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> avatarFullProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'avatarFull');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> avatarOrgProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'avatarOrg');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      backgroundImageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'backgroundImage');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> balanceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'balance');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> bannedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'banned');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      bannedReasonProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'bannedReason');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      backgroundImageStatusProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'bgStatus');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      birthPrivacyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'birthPrivacy');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> chatIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'chatId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> chatTimeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'chatTime');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> chatTypeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'chatType');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> cityProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'city');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> codeSentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'codeSent');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      confirmFollowersProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'confirmFollowers');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      convertedPointsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'convertedPoints');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> countryIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'countryId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> coverProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'cover');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> coverFullProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'coverFull');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> coverOrgProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'coverOrg');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> creditsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'credits');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> cssFileProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'cssFile');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      currentlyWorkingProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'currentlyWorking');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      dailyPointsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'dailyPoints');
    });
  }

  QueryBuilder<AllUserChatData, Details?, QQueryOperations> detailsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'details');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eAcceptedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eAccepted');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eCommentedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eCommented');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eFollowedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eFollowed');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      eJoinedGroupProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eJoinedGroup');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eLastNotifProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eLastNotif');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eLikedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eLiked');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eLikedPageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eLikedPage');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eMentionedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eMentioned');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      eProfileWallPostProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eProfileWallPost');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eSentmeMsgProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eSentmeMsg');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eSharedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eShared');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eVisitedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eVisited');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> eWonderedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'eWondered');
    });
  }

  QueryBuilder<AllUserChatData, String?, QQueryOperations> emailProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'email');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> emailCodeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'emailCode');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      emailNotificationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'emailNotification');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> facebookProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'facebook');
    });
  }

  QueryBuilder<AllUserChatData, String?, QQueryOperations> firstNameProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'firstName');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      followPrivacyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'followPrivacy');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      friendPrivacyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'friendPrivacy');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      fromServerIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'fromServerId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> genderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'gender');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> googleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'google');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      googleSecretProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'googleSecret');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> infoFileProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'infoFile');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> instagramProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'instagram');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      iosMDeviceIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'iosMDeviceId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      iosNDeviceIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'iosNDeviceId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> ipAddressProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'ipAddress');
    });
  }

  QueryBuilder<AllUserChatData, int, QQueryOperations> isOpenToWorkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isOpenToWork');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> isProProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isPro');
    });
  }

  QueryBuilder<AllUserChatData, int, QQueryOperations>
      isProvidingServiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isProvidingService');
    });
  }

  QueryBuilder<AllUserChatData, bool, QQueryOperations> isReportedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isReported');
    });
  }

  QueryBuilder<AllUserChatData, int, QQueryOperations>
      isReportedUserProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isReportedUser');
    });
  }

  QueryBuilder<AllUserChatData, bool, QQueryOperations> isStoryMutedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isStoryMuted');
    });
  }

  QueryBuilder<AllUserChatData, int, QQueryOperations> isVerifiedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'isVerified');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> joinedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'joined');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> languageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'language');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastAvatarModProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastAvatarMod');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastCoverModProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastCoverMod');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastDataUpdateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastDataUpdate');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastEmailSentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastEmailSent');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastFollowIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastFollowId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastLocationUpdateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastLocationUpdate');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastLoginDataProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastLoginData');
    });
  }

  QueryBuilder<AllUserChatData, LastMessage, QQueryOperations>
      lastMessageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastMessage');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> lastNameProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastName');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> lastseenProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastseen');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastseenStatusProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastseenStatus');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      lastseenUnixTimeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastseenUnixTime');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> latProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lat');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> linkedinProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'linkedin');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> lngProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lng');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      messageCountProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'messageCount');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      messagePrivacyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'messagePrivacy');
    });
  }

  QueryBuilder<AllUserChatData, Mute, QQueryOperations> muteProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'mute');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> nameProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'name');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> newEmailProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'newEmail');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> newPhoneProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'newPhone');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      notificationSettingsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'notificationSettings');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      notificationsSoundProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'notificationsSound');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> okruProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'okru');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      openToWorkDataProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'openToWorkData');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      orderPostsByProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'orderPostsBy');
    });
  }

  QueryBuilder<AllUserChatData, String?, QQueryOperations> passwordProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'password');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      paypalEmailProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'paypalEmail');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      paystackRefProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'paystackRef');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      phoneNumberProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'phoneNumber');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      pointDayExpireProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'pointDayExpire');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> pointsProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'points');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      postPrivacyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'postPrivacy');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      proRemainderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'proRemainder');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> proTimeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'proTime');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> proTypeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'proType');
    });
  }

  QueryBuilder<AllUserChatData, int, QQueryOperations>
      providingServiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'providingService');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> refUserIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'refUserId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> referrerProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'referrer');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> registeredProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'registered');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      relationshipIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'relationshipId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> schoolProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'school');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      schoolCompletedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'schoolCompleted');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      shareMyDataProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'shareMyData');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      shareMyLocationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'shareMyLocation');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      showActivitiesPrivacyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'showActivitiesPrivacy');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      showlastseenProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'showlastseen');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      sidebarDataProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'sidebarData');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> smsCodeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'smsCode');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      socialLoginProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'socialLogin');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> srcProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'src');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> startUpProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'startUp');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      startUpInfoProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'startUpInfo');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      startupFollowProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'startupFollow');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      startupImageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'startupImage');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> stateProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'state');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> statusProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'status');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      timeCodeSentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'timeCodeSent');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> timezoneProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'timezone');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> twitterProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'twitter');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> twoFactorProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'twoFactor');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      twoFactorHashProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'twoFactorHash');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      twoFactorMethodProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'twoFactorMethod');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      twoFactorVerifiedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'twoFactorVerified');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> typeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'type');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> urlProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'url');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> userIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'userId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      userPlatformProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'userPlatform');
    });
  }

  QueryBuilder<AllUserChatData, String?, QQueryOperations> usernameProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'username');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> verifiedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'verified');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      visitPrivacyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'visitPrivacy');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> vkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'vk');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> walletProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'wallet');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      weatherUnitProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'weatherUnit');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      webDeviceIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'webDeviceId');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> websiteProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'website');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> workingProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'working');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations>
      workingLinkProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'workingLink');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> youtubeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'youtube');
    });
  }

  QueryBuilder<AllUserChatData, String, QQueryOperations> zipProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'zip');
    });
  }
}

// **************************************************************************
// IsarEmbeddedGenerator
// **************************************************************************

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

const ApiNotificationSettingsSchema = Schema(
  name: r'ApiNotificationSettings',
  id: -6990204758366221969,
  properties: {},
  estimateSize: _apiNotificationSettingsEstimateSize,
  serialize: _apiNotificationSettingsSerialize,
  deserialize: _apiNotificationSettingsDeserialize,
  deserializeProp: _apiNotificationSettingsDeserializeProp,
);

int _apiNotificationSettingsEstimateSize(
  ApiNotificationSettings object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  return bytesCount;
}

void _apiNotificationSettingsSerialize(
  ApiNotificationSettings object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {}
ApiNotificationSettings _apiNotificationSettingsDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = ApiNotificationSettings();
  return object;
}

P _apiNotificationSettingsDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension ApiNotificationSettingsQueryFilter on QueryBuilder<
    ApiNotificationSettings, ApiNotificationSettings, QFilterCondition> {}

extension ApiNotificationSettingsQueryObject on QueryBuilder<
    ApiNotificationSettings, ApiNotificationSettings, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

const DetailsSchema = Schema(
  name: r'Details',
  id: -6145017574900706740,
  properties: {
    r'albumCount': PropertySchema(
      id: 0,
      name: r'albumCount',
      type: IsarType.string,
    ),
    r'followersCount': PropertySchema(
      id: 1,
      name: r'followersCount',
      type: IsarType.string,
    ),
    r'followingCount': PropertySchema(
      id: 2,
      name: r'followingCount',
      type: IsarType.string,
    ),
    r'groupsCount': PropertySchema(
      id: 3,
      name: r'groupsCount',
      type: IsarType.string,
    ),
    r'likesCount': PropertySchema(
      id: 4,
      name: r'likesCount',
      type: IsarType.string,
    ),
    r'postCount': PropertySchema(
      id: 5,
      name: r'postCount',
      type: IsarType.string,
    )
  },
  estimateSize: _detailsEstimateSize,
  serialize: _detailsSerialize,
  deserialize: _detailsDeserialize,
  deserializeProp: _detailsDeserializeProp,
);

int _detailsEstimateSize(
  Details object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.albumCount;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.followersCount;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.followingCount;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.groupsCount;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.likesCount;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.postCount;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _detailsSerialize(
  Details object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeString(offsets[0], object.albumCount);
  writer.writeString(offsets[1], object.followersCount);
  writer.writeString(offsets[2], object.followingCount);
  writer.writeString(offsets[3], object.groupsCount);
  writer.writeString(offsets[4], object.likesCount);
  writer.writeString(offsets[5], object.postCount);
}

Details _detailsDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = Details(
    albumCount: reader.readStringOrNull(offsets[0]),
    followersCount: reader.readStringOrNull(offsets[1]),
    followingCount: reader.readStringOrNull(offsets[2]),
    groupsCount: reader.readStringOrNull(offsets[3]),
    likesCount: reader.readStringOrNull(offsets[4]),
    postCount: reader.readStringOrNull(offsets[5]),
  );
  return object;
}

P _detailsDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readStringOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    case 2:
      return (reader.readStringOrNull(offset)) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readStringOrNull(offset)) as P;
    case 5:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension DetailsQueryFilter
    on QueryBuilder<Details, Details, QFilterCondition> {
  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'albumCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'albumCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'albumCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'albumCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'albumCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'albumCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'albumCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'albumCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'albumCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'albumCount',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'albumCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> albumCountIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'albumCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followersCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'followersCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followersCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'followersCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followersCountEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'followersCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followersCountGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'followersCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followersCountLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'followersCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followersCountBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'followersCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followersCountStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'followersCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followersCountEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'followersCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followersCountContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'followersCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followersCountMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'followersCount',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followersCountIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'followersCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followersCountIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'followersCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followingCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'followingCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followingCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'followingCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followingCountEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'followingCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followingCountGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'followingCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followingCountLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'followingCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followingCountBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'followingCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followingCountStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'followingCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followingCountEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'followingCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followingCountContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'followingCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> followingCountMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'followingCount',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followingCountIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'followingCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      followingCountIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'followingCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'groupsCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'groupsCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groupsCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'groupsCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'groupsCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'groupsCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'groupsCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'groupsCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'groupsCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'groupsCount',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> groupsCountIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groupsCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition>
      groupsCountIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'groupsCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'likesCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'likesCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'likesCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'likesCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'likesCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'likesCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'likesCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'likesCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'likesCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'likesCount',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'likesCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> likesCountIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'likesCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'postCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'postCount',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'postCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'postCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'postCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'postCount',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'postCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'postCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'postCount',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'postCount',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'postCount',
        value: '',
      ));
    });
  }

  QueryBuilder<Details, Details, QAfterFilterCondition> postCountIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'postCount',
        value: '',
      ));
    });
  }
}

extension DetailsQueryObject
    on QueryBuilder<Details, Details, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

const LastMessageSchema = Schema(
  name: r'LastMessage',
  id: 430351496321737210,
  properties: {
    r'broadcastId': PropertySchema(
      id: 0,
      name: r'broadcastId',
      type: IsarType.string,
    ),
    r'chatColor': PropertySchema(
      id: 1,
      name: r'chatColor',
      type: IsarType.string,
    ),
    r'deletedOne': PropertySchema(
      id: 2,
      name: r'deletedOne',
      type: IsarType.string,
    ),
    r'deletedTwo': PropertySchema(
      id: 3,
      name: r'deletedTwo',
      type: IsarType.string,
    ),
    r'forward': PropertySchema(
      id: 4,
      name: r'forward',
      type: IsarType.string,
    ),
    r'fromId': PropertySchema(
      id: 5,
      name: r'fromId',
      type: IsarType.string,
    ),
    r'groupId': PropertySchema(
      id: 6,
      name: r'groupId',
      type: IsarType.string,
    ),
    r'lMessageId': PropertySchema(
      id: 7,
      name: r'lMessageId',
      type: IsarType.string,
    ),
    r'lat': PropertySchema(
      id: 8,
      name: r'lat',
      type: IsarType.string,
    ),
    r'listening': PropertySchema(
      id: 9,
      name: r'listening',
      type: IsarType.string,
    ),
    r'lng': PropertySchema(
      id: 10,
      name: r'lng',
      type: IsarType.string,
    ),
    r'media': PropertySchema(
      id: 11,
      name: r'media',
      type: IsarType.string,
    ),
    r'mediaFileName': PropertySchema(
      id: 12,
      name: r'mediaFileName',
      type: IsarType.string,
    ),
    r'mediaFileNames': PropertySchema(
      id: 13,
      name: r'mediaFileNames',
      type: IsarType.string,
    ),
    r'messageUser': PropertySchema(
      id: 14,
      name: r'messageUser',
      type: IsarType.object,
      target: r'MessageUser',
    ),
    r'notificationId': PropertySchema(
      id: 15,
      name: r'notificationId',
      type: IsarType.string,
    ),
    r'onwer': PropertySchema(
      id: 16,
      name: r'onwer',
      type: IsarType.long,
    ),
    r'pageId': PropertySchema(
      id: 17,
      name: r'pageId',
      type: IsarType.string,
    ),
    r'position': PropertySchema(
      id: 18,
      name: r'position',
      type: IsarType.string,
    ),
    r'productId': PropertySchema(
      id: 19,
      name: r'productId',
      type: IsarType.string,
    ),
    r'reaction': PropertySchema(
      id: 20,
      name: r'reaction',
      type: IsarType.object,
      target: r'Reaction',
    ),
    r'replyId': PropertySchema(
      id: 21,
      name: r'replyId',
      type: IsarType.string,
    ),
    r'seen': PropertySchema(
      id: 22,
      name: r'seen',
      type: IsarType.string,
    ),
    r'sentPush': PropertySchema(
      id: 23,
      name: r'sentPush',
      type: IsarType.string,
    ),
    r'stickers': PropertySchema(
      id: 24,
      name: r'stickers',
      type: IsarType.string,
    ),
    r'storyId': PropertySchema(
      id: 25,
      name: r'storyId',
      type: IsarType.string,
    ),
    r'text': PropertySchema(
      id: 26,
      name: r'text',
      type: IsarType.string,
    ),
    r'time': PropertySchema(
      id: 27,
      name: r'time',
      type: IsarType.string,
    ),
    r'timeText': PropertySchema(
      id: 28,
      name: r'timeText',
      type: IsarType.string,
    ),
    r'toId': PropertySchema(
      id: 29,
      name: r'toId',
      type: IsarType.string,
    ),
    r'type': PropertySchema(
      id: 30,
      name: r'type',
      type: IsarType.string,
    ),
    r'typeTwo': PropertySchema(
      id: 31,
      name: r'typeTwo',
      type: IsarType.string,
    )
  },
  estimateSize: _lastMessageEstimateSize,
  serialize: _lastMessageSerialize,
  deserialize: _lastMessageDeserialize,
  deserializeProp: _lastMessageDeserializeProp,
);

int _lastMessageEstimateSize(
  LastMessage object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.broadcastId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.chatColor;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.deletedOne;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.deletedTwo;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.forward;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.fromId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.groupId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lMessageId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lat;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.listening;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lng;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.media;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.mediaFileName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.mediaFileNames;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.messageUser;
    if (value != null) {
      bytesCount += 3 +
          MessageUserSchema.estimateSize(
              value, allOffsets[MessageUser]!, allOffsets);
    }
  }
  {
    final value = object.notificationId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.pageId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.position;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.productId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.reaction;
    if (value != null) {
      bytesCount += 3 +
          ReactionSchema.estimateSize(value, allOffsets[Reaction]!, allOffsets);
    }
  }
  {
    final value = object.replyId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.seen;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.sentPush;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.stickers;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.storyId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.text;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.time;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.timeText;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.toId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.type;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.typeTwo;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _lastMessageSerialize(
  LastMessage object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeString(offsets[0], object.broadcastId);
  writer.writeString(offsets[1], object.chatColor);
  writer.writeString(offsets[2], object.deletedOne);
  writer.writeString(offsets[3], object.deletedTwo);
  writer.writeString(offsets[4], object.forward);
  writer.writeString(offsets[5], object.fromId);
  writer.writeString(offsets[6], object.groupId);
  writer.writeString(offsets[7], object.lMessageId);
  writer.writeString(offsets[8], object.lat);
  writer.writeString(offsets[9], object.listening);
  writer.writeString(offsets[10], object.lng);
  writer.writeString(offsets[11], object.media);
  writer.writeString(offsets[12], object.mediaFileName);
  writer.writeString(offsets[13], object.mediaFileNames);
  writer.writeObject<MessageUser>(
    offsets[14],
    allOffsets,
    MessageUserSchema.serialize,
    object.messageUser,
  );
  writer.writeString(offsets[15], object.notificationId);
  writer.writeLong(offsets[16], object.onwer);
  writer.writeString(offsets[17], object.pageId);
  writer.writeString(offsets[18], object.position);
  writer.writeString(offsets[19], object.productId);
  writer.writeObject<Reaction>(
    offsets[20],
    allOffsets,
    ReactionSchema.serialize,
    object.reaction,
  );
  writer.writeString(offsets[21], object.replyId);
  writer.writeString(offsets[22], object.seen);
  writer.writeString(offsets[23], object.sentPush);
  writer.writeString(offsets[24], object.stickers);
  writer.writeString(offsets[25], object.storyId);
  writer.writeString(offsets[26], object.text);
  writer.writeString(offsets[27], object.time);
  writer.writeString(offsets[28], object.timeText);
  writer.writeString(offsets[29], object.toId);
  writer.writeString(offsets[30], object.type);
  writer.writeString(offsets[31], object.typeTwo);
}

LastMessage _lastMessageDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = LastMessage(
    broadcastId: reader.readStringOrNull(offsets[0]),
    chatColor: reader.readStringOrNull(offsets[1]),
    deletedOne: reader.readStringOrNull(offsets[2]),
    deletedTwo: reader.readStringOrNull(offsets[3]),
    forward: reader.readStringOrNull(offsets[4]),
    fromId: reader.readStringOrNull(offsets[5]),
    groupId: reader.readStringOrNull(offsets[6]),
    lMessageId: reader.readStringOrNull(offsets[7]),
    lat: reader.readStringOrNull(offsets[8]),
    listening: reader.readStringOrNull(offsets[9]),
    lng: reader.readStringOrNull(offsets[10]),
    media: reader.readStringOrNull(offsets[11]),
    mediaFileName: reader.readStringOrNull(offsets[12]),
    mediaFileNames: reader.readStringOrNull(offsets[13]),
    messageUser: reader.readObjectOrNull<MessageUser>(
      offsets[14],
      MessageUserSchema.deserialize,
      allOffsets,
    ),
    notificationId: reader.readStringOrNull(offsets[15]),
    onwer: reader.readLongOrNull(offsets[16]),
    pageId: reader.readStringOrNull(offsets[17]),
    position: reader.readStringOrNull(offsets[18]),
    productId: reader.readStringOrNull(offsets[19]),
    reaction: reader.readObjectOrNull<Reaction>(
      offsets[20],
      ReactionSchema.deserialize,
      allOffsets,
    ),
    replyId: reader.readStringOrNull(offsets[21]),
    seen: reader.readStringOrNull(offsets[22]),
    sentPush: reader.readStringOrNull(offsets[23]),
    stickers: reader.readStringOrNull(offsets[24]),
    storyId: reader.readStringOrNull(offsets[25]),
    text: reader.readStringOrNull(offsets[26]),
    time: reader.readStringOrNull(offsets[27]),
    timeText: reader.readStringOrNull(offsets[28]),
    toId: reader.readStringOrNull(offsets[29]),
    type: reader.readStringOrNull(offsets[30]),
    typeTwo: reader.readStringOrNull(offsets[31]),
  );
  return object;
}

P _lastMessageDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readStringOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    case 2:
      return (reader.readStringOrNull(offset)) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readStringOrNull(offset)) as P;
    case 5:
      return (reader.readStringOrNull(offset)) as P;
    case 6:
      return (reader.readStringOrNull(offset)) as P;
    case 7:
      return (reader.readStringOrNull(offset)) as P;
    case 8:
      return (reader.readStringOrNull(offset)) as P;
    case 9:
      return (reader.readStringOrNull(offset)) as P;
    case 10:
      return (reader.readStringOrNull(offset)) as P;
    case 11:
      return (reader.readStringOrNull(offset)) as P;
    case 12:
      return (reader.readStringOrNull(offset)) as P;
    case 13:
      return (reader.readStringOrNull(offset)) as P;
    case 14:
      return (reader.readObjectOrNull<MessageUser>(
        offset,
        MessageUserSchema.deserialize,
        allOffsets,
      )) as P;
    case 15:
      return (reader.readStringOrNull(offset)) as P;
    case 16:
      return (reader.readLongOrNull(offset)) as P;
    case 17:
      return (reader.readStringOrNull(offset)) as P;
    case 18:
      return (reader.readStringOrNull(offset)) as P;
    case 19:
      return (reader.readStringOrNull(offset)) as P;
    case 20:
      return (reader.readObjectOrNull<Reaction>(
        offset,
        ReactionSchema.deserialize,
        allOffsets,
      )) as P;
    case 21:
      return (reader.readStringOrNull(offset)) as P;
    case 22:
      return (reader.readStringOrNull(offset)) as P;
    case 23:
      return (reader.readStringOrNull(offset)) as P;
    case 24:
      return (reader.readStringOrNull(offset)) as P;
    case 25:
      return (reader.readStringOrNull(offset)) as P;
    case 26:
      return (reader.readStringOrNull(offset)) as P;
    case 27:
      return (reader.readStringOrNull(offset)) as P;
    case 28:
      return (reader.readStringOrNull(offset)) as P;
    case 29:
      return (reader.readStringOrNull(offset)) as P;
    case 30:
      return (reader.readStringOrNull(offset)) as P;
    case 31:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension LastMessageQueryFilter
    on QueryBuilder<LastMessage, LastMessage, QFilterCondition> {
  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'broadcastId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'broadcastId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'broadcastId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'broadcastId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'broadcastId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'broadcastId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'broadcastId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'broadcastId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'broadcastId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'broadcastId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'broadcastId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      broadcastIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'broadcastId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'chatColor',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'chatColor',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'chatColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'chatColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'chatColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'chatColor',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'chatColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'chatColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'chatColor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'chatColor',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'chatColor',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      chatColorIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'chatColor',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deletedOne',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deletedOne',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deletedOne',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deletedOne',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deletedOne',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deletedOne',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'deletedOne',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'deletedOne',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'deletedOne',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'deletedOne',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deletedOne',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedOneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'deletedOne',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'deletedTwo',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'deletedTwo',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deletedTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'deletedTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'deletedTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'deletedTwo',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'deletedTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'deletedTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'deletedTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'deletedTwo',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'deletedTwo',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      deletedTwoIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'deletedTwo',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      forwardIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'forward',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      forwardIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'forward',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> forwardEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'forward',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      forwardGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'forward',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> forwardLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'forward',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> forwardBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'forward',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      forwardStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'forward',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> forwardEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'forward',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> forwardContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'forward',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> forwardMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'forward',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      forwardIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'forward',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      forwardIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'forward',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> fromIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'fromId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      fromIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'fromId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> fromIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fromId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      fromIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'fromId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> fromIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'fromId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> fromIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'fromId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      fromIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'fromId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> fromIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'fromId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> fromIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'fromId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> fromIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'fromId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      fromIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fromId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      fromIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'fromId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      groupIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'groupId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      groupIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'groupId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> groupIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groupId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      groupIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'groupId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> groupIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'groupId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> groupIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'groupId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      groupIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'groupId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> groupIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'groupId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> groupIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'groupId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> groupIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'groupId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      groupIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'groupId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      groupIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'groupId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lMessageId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lMessageId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lMessageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lMessageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lMessageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lMessageId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lMessageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lMessageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lMessageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lMessageId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lMessageId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lMessageIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lMessageId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lat',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lat',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lat',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lat',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> latIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lat',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      latIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lat',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'listening',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'listening',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'listening',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'listening',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'listening',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'listening',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'listening',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'listening',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'listening',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'listening',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'listening',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      listeningIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'listening',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lng',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lng',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lng',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lng',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> lngIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lng',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      lngIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lng',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'media',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'media',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'media',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'media',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'media',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'media',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'media',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'media',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'media',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'media',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> mediaIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'media',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'media',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mediaFileName',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mediaFileName',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mediaFileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'mediaFileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'mediaFileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'mediaFileName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'mediaFileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'mediaFileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'mediaFileName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'mediaFileName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mediaFileName',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'mediaFileName',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'mediaFileNames',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'mediaFileNames',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mediaFileNames',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'mediaFileNames',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'mediaFileNames',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'mediaFileNames',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'mediaFileNames',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'mediaFileNames',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'mediaFileNames',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'mediaFileNames',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'mediaFileNames',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      mediaFileNamesIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'mediaFileNames',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      messageUserIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'messageUser',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      messageUserIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'messageUser',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'notificationId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'notificationId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notificationId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notificationId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notificationId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'notificationId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'notificationId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'notificationId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'notificationId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      notificationIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'notificationId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> onwerIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'onwer',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      onwerIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'onwer',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> onwerEqualTo(
      int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'onwer',
        value: value,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      onwerGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'onwer',
        value: value,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> onwerLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'onwer',
        value: value,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> onwerBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'onwer',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> pageIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'pageId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      pageIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'pageId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> pageIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      pageIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'pageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> pageIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'pageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> pageIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'pageId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      pageIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'pageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> pageIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'pageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> pageIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'pageId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> pageIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'pageId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      pageIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pageId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      pageIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'pageId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'position',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'position',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> positionEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'position',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'position',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'position',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> positionBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'position',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'position',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'position',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'position',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> positionMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'position',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'position',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      positionIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'position',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'productId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'productId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'productId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'productId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'productId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'productId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'productId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'productId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'productId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'productId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'productId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      productIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'productId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      reactionIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'reaction',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      reactionIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'reaction',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      replyIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'replyId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      replyIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'replyId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> replyIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'replyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      replyIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'replyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> replyIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'replyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> replyIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'replyId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      replyIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'replyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> replyIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'replyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> replyIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'replyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> replyIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'replyId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      replyIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'replyId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      replyIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'replyId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'seen',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      seenIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'seen',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'seen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'seen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'seen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'seen',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'seen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'seen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'seen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'seen',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> seenIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'seen',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      seenIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'seen',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'sentPush',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'sentPush',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> sentPushEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sentPush',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'sentPush',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'sentPush',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> sentPushBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'sentPush',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'sentPush',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'sentPush',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'sentPush',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> sentPushMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'sentPush',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'sentPush',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      sentPushIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'sentPush',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'stickers',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'stickers',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> stickersEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'stickers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'stickers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'stickers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> stickersBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'stickers',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'stickers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'stickers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'stickers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> stickersMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'stickers',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'stickers',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      stickersIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'stickers',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      storyIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'storyId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      storyIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'storyId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> storyIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'storyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      storyIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'storyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> storyIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'storyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> storyIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'storyId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      storyIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'storyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> storyIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'storyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> storyIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'storyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> storyIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'storyId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      storyIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'storyId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      storyIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'storyId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'text',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      textIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'text',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'text',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'text',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'text',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'text',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'text',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'text',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'text',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'text',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> textIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'text',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      textIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'text',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'time',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'time',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'time',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'time',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'time',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'time',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'time',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'time',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'time',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'time',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'time',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'time',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'timeText',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'timeText',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeTextEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timeText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'timeText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'timeText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeTextBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'timeText',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'timeText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'timeText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'timeText',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> timeTextMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'timeText',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timeText',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      timeTextIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'timeText',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'toId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      toIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'toId',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'toId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'toId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'toId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'toId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'toId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'toId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'toId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'toId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> toIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'toId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      toIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'toId',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'type',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      typeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'type',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'type',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'type',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      typeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      typeTwoIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'typeTwo',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      typeTwoIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'typeTwo',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeTwoEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'typeTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      typeTwoGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'typeTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeTwoLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'typeTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeTwoBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'typeTwo',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      typeTwoStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'typeTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeTwoEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'typeTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeTwoContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'typeTwo',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> typeTwoMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'typeTwo',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      typeTwoIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'typeTwo',
        value: '',
      ));
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition>
      typeTwoIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'typeTwo',
        value: '',
      ));
    });
  }
}

extension LastMessageQueryObject
    on QueryBuilder<LastMessage, LastMessage, QFilterCondition> {
  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> messageUser(
      FilterQuery<MessageUser> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'messageUser');
    });
  }

  QueryBuilder<LastMessage, LastMessage, QAfterFilterCondition> reaction(
      FilterQuery<Reaction> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'reaction');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

const MessageUserSchema = Schema(
  name: r'MessageUser',
  id: -7849621512993965176,
  properties: {
    r'about': PropertySchema(
      id: 0,
      name: r'about',
      type: IsarType.string,
    ),
    r'active': PropertySchema(
      id: 1,
      name: r'active',
      type: IsarType.string,
    ),
    r'address': PropertySchema(
      id: 2,
      name: r'address',
      type: IsarType.string,
    ),
    r'admin': PropertySchema(
      id: 3,
      name: r'admin',
      type: IsarType.string,
    ),
    r'androidMDeviceId': PropertySchema(
      id: 4,
      name: r'androidMDeviceId',
      type: IsarType.string,
    ),
    r'androidNDeviceId': PropertySchema(
      id: 5,
      name: r'androidNDeviceId',
      type: IsarType.string,
    ),
    r'apiNotificationSettings': PropertySchema(
      id: 6,
      name: r'apiNotificationSettings',
      type: IsarType.object,
      target: r'ApiNotificationSettings',
    ),
    r'authyId': PropertySchema(
      id: 7,
      name: r'authyId',
      type: IsarType.string,
    ),
    r'avatar': PropertySchema(
      id: 8,
      name: r'avatar',
      type: IsarType.string,
    ),
    r'avatarFull': PropertySchema(
      id: 9,
      name: r'avatarFull',
      type: IsarType.string,
    ),
    r'backgroundImage': PropertySchema(
      id: 10,
      name: r'backgroundImage',
      type: IsarType.string,
    ),
    r'balance': PropertySchema(
      id: 11,
      name: r'balance',
      type: IsarType.string,
    ),
    r'banned': PropertySchema(
      id: 12,
      name: r'banned',
      type: IsarType.string,
    ),
    r'bannedReason': PropertySchema(
      id: 13,
      name: r'bannedReason',
      type: IsarType.string,
    ),
    r'birthPrivacy': PropertySchema(
      id: 14,
      name: r'birthPrivacy',
      type: IsarType.string,
    ),
    r'birthday': PropertySchema(
      id: 15,
      name: r'birthday',
      type: IsarType.string,
    ),
    r'city': PropertySchema(
      id: 16,
      name: r'city',
      type: IsarType.string,
    ),
    r'codeSent': PropertySchema(
      id: 17,
      name: r'codeSent',
      type: IsarType.string,
    ),
    r'confirmFollowers': PropertySchema(
      id: 18,
      name: r'confirmFollowers',
      type: IsarType.string,
    ),
    r'convertedPoints': PropertySchema(
      id: 19,
      name: r'convertedPoints',
      type: IsarType.string,
    ),
    r'countryId': PropertySchema(
      id: 20,
      name: r'countryId',
      type: IsarType.string,
    ),
    r'cover': PropertySchema(
      id: 21,
      name: r'cover',
      type: IsarType.string,
    ),
    r'credits': PropertySchema(
      id: 22,
      name: r'credits',
      type: IsarType.string,
    ),
    r'currentlyWorking': PropertySchema(
      id: 23,
      name: r'currentlyWorking',
      type: IsarType.string,
    ),
    r'dailyPoints': PropertySchema(
      id: 24,
      name: r'dailyPoints',
      type: IsarType.string,
    ),
    r'details': PropertySchema(
      id: 25,
      name: r'details',
      type: IsarType.object,
      target: r'Details',
    ),
    r'eAccepted': PropertySchema(
      id: 26,
      name: r'eAccepted',
      type: IsarType.string,
    ),
    r'eCommented': PropertySchema(
      id: 27,
      name: r'eCommented',
      type: IsarType.string,
    ),
    r'eFollowed': PropertySchema(
      id: 28,
      name: r'eFollowed',
      type: IsarType.string,
    ),
    r'eJoinedGroup': PropertySchema(
      id: 29,
      name: r'eJoinedGroup',
      type: IsarType.string,
    ),
    r'eLastNotif': PropertySchema(
      id: 30,
      name: r'eLastNotif',
      type: IsarType.string,
    ),
    r'eLiked': PropertySchema(
      id: 31,
      name: r'eLiked',
      type: IsarType.string,
    ),
    r'eLikedPage': PropertySchema(
      id: 32,
      name: r'eLikedPage',
      type: IsarType.string,
    ),
    r'eMentioned': PropertySchema(
      id: 33,
      name: r'eMentioned',
      type: IsarType.string,
    ),
    r'eProfileWallPost': PropertySchema(
      id: 34,
      name: r'eProfileWallPost',
      type: IsarType.string,
    ),
    r'eSentmeMsg': PropertySchema(
      id: 35,
      name: r'eSentmeMsg',
      type: IsarType.string,
    ),
    r'eShared': PropertySchema(
      id: 36,
      name: r'eShared',
      type: IsarType.string,
    ),
    r'eVisited': PropertySchema(
      id: 37,
      name: r'eVisited',
      type: IsarType.string,
    ),
    r'eWondered': PropertySchema(
      id: 38,
      name: r'eWondered',
      type: IsarType.string,
    ),
    r'email': PropertySchema(
      id: 39,
      name: r'email',
      type: IsarType.string,
    ),
    r'emailNotification': PropertySchema(
      id: 40,
      name: r'emailNotification',
      type: IsarType.string,
    ),
    r'facebook': PropertySchema(
      id: 41,
      name: r'facebook',
      type: IsarType.string,
    ),
    r'firstName': PropertySchema(
      id: 42,
      name: r'firstName',
      type: IsarType.string,
    ),
    r'followPrivacy': PropertySchema(
      id: 43,
      name: r'followPrivacy',
      type: IsarType.string,
    ),
    r'friendPrivacy': PropertySchema(
      id: 44,
      name: r'friendPrivacy',
      type: IsarType.string,
    ),
    r'gender': PropertySchema(
      id: 45,
      name: r'gender',
      type: IsarType.string,
    ),
    r'google': PropertySchema(
      id: 46,
      name: r'google',
      type: IsarType.string,
    ),
    r'googleSecret': PropertySchema(
      id: 47,
      name: r'googleSecret',
      type: IsarType.string,
    ),
    r'id': PropertySchema(
      id: 48,
      name: r'id',
      type: IsarType.string,
    ),
    r'infoFile': PropertySchema(
      id: 49,
      name: r'infoFile',
      type: IsarType.string,
    ),
    r'instagram': PropertySchema(
      id: 50,
      name: r'instagram',
      type: IsarType.string,
    ),
    r'iosMDeviceId': PropertySchema(
      id: 51,
      name: r'iosMDeviceId',
      type: IsarType.string,
    ),
    r'iosNDeviceId': PropertySchema(
      id: 52,
      name: r'iosNDeviceId',
      type: IsarType.string,
    ),
    r'ipAddress': PropertySchema(
      id: 53,
      name: r'ipAddress',
      type: IsarType.string,
    ),
    r'isOpenToWork': PropertySchema(
      id: 54,
      name: r'isOpenToWork',
      type: IsarType.long,
    ),
    r'isPro': PropertySchema(
      id: 55,
      name: r'isPro',
      type: IsarType.string,
    ),
    r'isProvidingService': PropertySchema(
      id: 56,
      name: r'isProvidingService',
      type: IsarType.long,
    ),
    r'isReported': PropertySchema(
      id: 57,
      name: r'isReported',
      type: IsarType.bool,
    ),
    r'isReportedUser': PropertySchema(
      id: 58,
      name: r'isReportedUser',
      type: IsarType.long,
    ),
    r'isStoryMuted': PropertySchema(
      id: 59,
      name: r'isStoryMuted',
      type: IsarType.bool,
    ),
    r'isVerified': PropertySchema(
      id: 60,
      name: r'isVerified',
      type: IsarType.long,
    ),
    r'language': PropertySchema(
      id: 61,
      name: r'language',
      type: IsarType.string,
    ),
    r'lastAvatarMod': PropertySchema(
      id: 62,
      name: r'lastAvatarMod',
      type: IsarType.string,
    ),
    r'lastCoverMod': PropertySchema(
      id: 63,
      name: r'lastCoverMod',
      type: IsarType.string,
    ),
    r'lastDataUpdate': PropertySchema(
      id: 64,
      name: r'lastDataUpdate',
      type: IsarType.string,
    ),
    r'lastFollowId': PropertySchema(
      id: 65,
      name: r'lastFollowId',
      type: IsarType.string,
    ),
    r'lastLocationUpdate': PropertySchema(
      id: 66,
      name: r'lastLocationUpdate',
      type: IsarType.string,
    ),
    r'lastLoginData': PropertySchema(
      id: 67,
      name: r'lastLoginData',
      type: IsarType.string,
    ),
    r'lastName': PropertySchema(
      id: 68,
      name: r'lastName',
      type: IsarType.string,
    ),
    r'lastseen': PropertySchema(
      id: 69,
      name: r'lastseen',
      type: IsarType.string,
    ),
    r'lastseenStatus': PropertySchema(
      id: 70,
      name: r'lastseenStatus',
      type: IsarType.string,
    ),
    r'lastseenUnixTime': PropertySchema(
      id: 71,
      name: r'lastseenUnixTime',
      type: IsarType.string,
    ),
    r'lat': PropertySchema(
      id: 72,
      name: r'lat',
      type: IsarType.string,
    ),
    r'linkedin': PropertySchema(
      id: 73,
      name: r'linkedin',
      type: IsarType.string,
    ),
    r'lng': PropertySchema(
      id: 74,
      name: r'lng',
      type: IsarType.string,
    ),
    r'messagePrivacy': PropertySchema(
      id: 75,
      name: r'messagePrivacy',
      type: IsarType.string,
    ),
    r'name': PropertySchema(
      id: 76,
      name: r'name',
      type: IsarType.string,
    ),
    r'newEmail': PropertySchema(
      id: 77,
      name: r'newEmail',
      type: IsarType.string,
    ),
    r'newPhone': PropertySchema(
      id: 78,
      name: r'newPhone',
      type: IsarType.string,
    ),
    r'notificationSettings': PropertySchema(
      id: 79,
      name: r'notificationSettings',
      type: IsarType.string,
    ),
    r'notificationsSound': PropertySchema(
      id: 80,
      name: r'notificationsSound',
      type: IsarType.string,
    ),
    r'okru': PropertySchema(
      id: 81,
      name: r'okru',
      type: IsarType.string,
    ),
    r'openToWorkData': PropertySchema(
      id: 82,
      name: r'openToWorkData',
      type: IsarType.string,
    ),
    r'orderPostsBy': PropertySchema(
      id: 83,
      name: r'orderPostsBy',
      type: IsarType.string,
    ),
    r'paypalEmail': PropertySchema(
      id: 84,
      name: r'paypalEmail',
      type: IsarType.string,
    ),
    r'paystackRef': PropertySchema(
      id: 85,
      name: r'paystackRef',
      type: IsarType.string,
    ),
    r'phoneNumber': PropertySchema(
      id: 86,
      name: r'phoneNumber',
      type: IsarType.string,
    ),
    r'pointDayExpire': PropertySchema(
      id: 87,
      name: r'pointDayExpire',
      type: IsarType.string,
    ),
    r'points': PropertySchema(
      id: 88,
      name: r'points',
      type: IsarType.string,
    ),
    r'postPrivacy': PropertySchema(
      id: 89,
      name: r'postPrivacy',
      type: IsarType.string,
    ),
    r'proRemainder': PropertySchema(
      id: 90,
      name: r'proRemainder',
      type: IsarType.string,
    ),
    r'proType': PropertySchema(
      id: 91,
      name: r'proType',
      type: IsarType.string,
    ),
    r'providingService': PropertySchema(
      id: 92,
      name: r'providingService',
      type: IsarType.long,
    ),
    r'refUserId': PropertySchema(
      id: 93,
      name: r'refUserId',
      type: IsarType.string,
    ),
    r'referrer': PropertySchema(
      id: 94,
      name: r'referrer',
      type: IsarType.string,
    ),
    r'registered': PropertySchema(
      id: 95,
      name: r'registered',
      type: IsarType.string,
    ),
    r'relationshipId': PropertySchema(
      id: 96,
      name: r'relationshipId',
      type: IsarType.string,
    ),
    r'school': PropertySchema(
      id: 97,
      name: r'school',
      type: IsarType.string,
    ),
    r'schoolCompleted': PropertySchema(
      id: 98,
      name: r'schoolCompleted',
      type: IsarType.string,
    ),
    r'shareMyData': PropertySchema(
      id: 99,
      name: r'shareMyData',
      type: IsarType.string,
    ),
    r'shareMyLocation': PropertySchema(
      id: 100,
      name: r'shareMyLocation',
      type: IsarType.string,
    ),
    r'showActivitiesPrivacy': PropertySchema(
      id: 101,
      name: r'showActivitiesPrivacy',
      type: IsarType.string,
    ),
    r'state': PropertySchema(
      id: 102,
      name: r'state',
      type: IsarType.string,
    ),
    r'status': PropertySchema(
      id: 103,
      name: r'status',
      type: IsarType.string,
    ),
    r'timeCodeSent': PropertySchema(
      id: 104,
      name: r'timeCodeSent',
      type: IsarType.string,
    ),
    r'timezone': PropertySchema(
      id: 105,
      name: r'timezone',
      type: IsarType.string,
    ),
    r'twitter': PropertySchema(
      id: 106,
      name: r'twitter',
      type: IsarType.string,
    ),
    r'twoFactor': PropertySchema(
      id: 107,
      name: r'twoFactor',
      type: IsarType.string,
    ),
    r'twoFactorHash': PropertySchema(
      id: 108,
      name: r'twoFactorHash',
      type: IsarType.string,
    ),
    r'twoFactorMethod': PropertySchema(
      id: 109,
      name: r'twoFactorMethod',
      type: IsarType.string,
    ),
    r'twoFactorVerified': PropertySchema(
      id: 110,
      name: r'twoFactorVerified',
      type: IsarType.string,
    ),
    r'url': PropertySchema(
      id: 111,
      name: r'url',
      type: IsarType.string,
    ),
    r'userPlatform': PropertySchema(
      id: 112,
      name: r'userPlatform',
      type: IsarType.string,
    ),
    r'username': PropertySchema(
      id: 113,
      name: r'username',
      type: IsarType.string,
    ),
    r'verified': PropertySchema(
      id: 114,
      name: r'verified',
      type: IsarType.string,
    ),
    r'visitPrivacy': PropertySchema(
      id: 115,
      name: r'visitPrivacy',
      type: IsarType.string,
    ),
    r'vk': PropertySchema(
      id: 116,
      name: r'vk',
      type: IsarType.string,
    ),
    r'wallet': PropertySchema(
      id: 117,
      name: r'wallet',
      type: IsarType.string,
    ),
    r'weatherUnit': PropertySchema(
      id: 118,
      name: r'weatherUnit',
      type: IsarType.string,
    ),
    r'webDeviceId': PropertySchema(
      id: 119,
      name: r'webDeviceId',
      type: IsarType.string,
    ),
    r'website': PropertySchema(
      id: 120,
      name: r'website',
      type: IsarType.string,
    ),
    r'working': PropertySchema(
      id: 121,
      name: r'working',
      type: IsarType.string,
    ),
    r'workingLink': PropertySchema(
      id: 122,
      name: r'workingLink',
      type: IsarType.string,
    ),
    r'youtube': PropertySchema(
      id: 123,
      name: r'youtube',
      type: IsarType.string,
    ),
    r'zip': PropertySchema(
      id: 124,
      name: r'zip',
      type: IsarType.string,
    )
  },
  estimateSize: _messageUserEstimateSize,
  serialize: _messageUserSerialize,
  deserialize: _messageUserDeserialize,
  deserializeProp: _messageUserDeserializeProp,
);

int _messageUserEstimateSize(
  MessageUser object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.about;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.active;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.address;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.admin;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.androidMDeviceId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.androidNDeviceId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.apiNotificationSettings;
    if (value != null) {
      bytesCount += 3 +
          ApiNotificationSettingsSchema.estimateSize(
              value, allOffsets[ApiNotificationSettings]!, allOffsets);
    }
  }
  {
    final value = object.authyId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.avatar;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.avatarFull;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.backgroundImage;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.balance;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.banned;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.bannedReason;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.birthPrivacy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.birthday;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.city;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.codeSent;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.confirmFollowers;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.convertedPoints;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.countryId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.cover;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.credits;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.currentlyWorking;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.dailyPoints;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.details;
    if (value != null) {
      bytesCount += 3 +
          DetailsSchema.estimateSize(value, allOffsets[Details]!, allOffsets);
    }
  }
  {
    final value = object.eAccepted;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eCommented;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eFollowed;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eJoinedGroup;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eLastNotif;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eLiked;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eLikedPage;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eMentioned;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eProfileWallPost;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eSentmeMsg;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eShared;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eVisited;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.eWondered;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.email;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.emailNotification;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.facebook;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.firstName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.followPrivacy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.friendPrivacy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.gender;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.google;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.googleSecret;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.userId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.infoFile;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.instagram;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.iosMDeviceId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.iosNDeviceId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.ipAddress;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.isPro;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.language;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastAvatarMod;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastCoverMod;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastDataUpdate;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastFollowId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastLocationUpdate;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastLoginData;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastName;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastseen;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastseenStatus;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lastseenUnixTime;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lat;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.linkedin;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.lng;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.messagePrivacy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.name;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.newEmail;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.newPhone;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.notificationSettings;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.notificationsSound;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.okru;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.openToWorkData;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.orderPostsBy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.paypalEmail;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.paystackRef;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.phoneNumber;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.pointDayExpire;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.points;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.postPrivacy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.proRemainder;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.proType;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.refUserId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.referrer;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.registered;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.relationshipId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.school;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.schoolCompleted;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.shareMyData;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.shareMyLocation;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.showActivitiesPrivacy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.state;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.status;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.timeCodeSent;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.timezone;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.twitter;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.twoFactor;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.twoFactorHash;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.twoFactorMethod;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.twoFactorVerified;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.url;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.userPlatform;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.username;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.verified;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.visitPrivacy;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.vk;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.wallet;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.weatherUnit;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.webDeviceId;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.website;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.working;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.workingLink;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.youtube;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.zip;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _messageUserSerialize(
  MessageUser object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeString(offsets[0], object.about);
  writer.writeString(offsets[1], object.active);
  writer.writeString(offsets[2], object.address);
  writer.writeString(offsets[3], object.admin);
  writer.writeString(offsets[4], object.androidMDeviceId);
  writer.writeString(offsets[5], object.androidNDeviceId);
  writer.writeObject<ApiNotificationSettings>(
    offsets[6],
    allOffsets,
    ApiNotificationSettingsSchema.serialize,
    object.apiNotificationSettings,
  );
  writer.writeString(offsets[7], object.authyId);
  writer.writeString(offsets[8], object.avatar);
  writer.writeString(offsets[9], object.avatarFull);
  writer.writeString(offsets[10], object.backgroundImage);
  writer.writeString(offsets[11], object.balance);
  writer.writeString(offsets[12], object.banned);
  writer.writeString(offsets[13], object.bannedReason);
  writer.writeString(offsets[14], object.birthPrivacy);
  writer.writeString(offsets[15], object.birthday);
  writer.writeString(offsets[16], object.city);
  writer.writeString(offsets[17], object.codeSent);
  writer.writeString(offsets[18], object.confirmFollowers);
  writer.writeString(offsets[19], object.convertedPoints);
  writer.writeString(offsets[20], object.countryId);
  writer.writeString(offsets[21], object.cover);
  writer.writeString(offsets[22], object.credits);
  writer.writeString(offsets[23], object.currentlyWorking);
  writer.writeString(offsets[24], object.dailyPoints);
  writer.writeObject<Details>(
    offsets[25],
    allOffsets,
    DetailsSchema.serialize,
    object.details,
  );
  writer.writeString(offsets[26], object.eAccepted);
  writer.writeString(offsets[27], object.eCommented);
  writer.writeString(offsets[28], object.eFollowed);
  writer.writeString(offsets[29], object.eJoinedGroup);
  writer.writeString(offsets[30], object.eLastNotif);
  writer.writeString(offsets[31], object.eLiked);
  writer.writeString(offsets[32], object.eLikedPage);
  writer.writeString(offsets[33], object.eMentioned);
  writer.writeString(offsets[34], object.eProfileWallPost);
  writer.writeString(offsets[35], object.eSentmeMsg);
  writer.writeString(offsets[36], object.eShared);
  writer.writeString(offsets[37], object.eVisited);
  writer.writeString(offsets[38], object.eWondered);
  writer.writeString(offsets[39], object.email);
  writer.writeString(offsets[40], object.emailNotification);
  writer.writeString(offsets[41], object.facebook);
  writer.writeString(offsets[42], object.firstName);
  writer.writeString(offsets[43], object.followPrivacy);
  writer.writeString(offsets[44], object.friendPrivacy);
  writer.writeString(offsets[45], object.gender);
  writer.writeString(offsets[46], object.google);
  writer.writeString(offsets[47], object.googleSecret);
  writer.writeString(offsets[48], object.userId);
  writer.writeString(offsets[49], object.infoFile);
  writer.writeString(offsets[50], object.instagram);
  writer.writeString(offsets[51], object.iosMDeviceId);
  writer.writeString(offsets[52], object.iosNDeviceId);
  writer.writeString(offsets[53], object.ipAddress);
  writer.writeLong(offsets[54], object.isOpenToWork);
  writer.writeString(offsets[55], object.isPro);
  writer.writeLong(offsets[56], object.isProvidingService);
  writer.writeBool(offsets[57], object.isReported);
  writer.writeLong(offsets[58], object.isReportedUser);
  writer.writeBool(offsets[59], object.isStoryMuted);
  writer.writeLong(offsets[60], object.isVerified);
  writer.writeString(offsets[61], object.language);
  writer.writeString(offsets[62], object.lastAvatarMod);
  writer.writeString(offsets[63], object.lastCoverMod);
  writer.writeString(offsets[64], object.lastDataUpdate);
  writer.writeString(offsets[65], object.lastFollowId);
  writer.writeString(offsets[66], object.lastLocationUpdate);
  writer.writeString(offsets[67], object.lastLoginData);
  writer.writeString(offsets[68], object.lastName);
  writer.writeString(offsets[69], object.lastseen);
  writer.writeString(offsets[70], object.lastseenStatus);
  writer.writeString(offsets[71], object.lastseenUnixTime);
  writer.writeString(offsets[72], object.lat);
  writer.writeString(offsets[73], object.linkedin);
  writer.writeString(offsets[74], object.lng);
  writer.writeString(offsets[75], object.messagePrivacy);
  writer.writeString(offsets[76], object.name);
  writer.writeString(offsets[77], object.newEmail);
  writer.writeString(offsets[78], object.newPhone);
  writer.writeString(offsets[79], object.notificationSettings);
  writer.writeString(offsets[80], object.notificationsSound);
  writer.writeString(offsets[81], object.okru);
  writer.writeString(offsets[82], object.openToWorkData);
  writer.writeString(offsets[83], object.orderPostsBy);
  writer.writeString(offsets[84], object.paypalEmail);
  writer.writeString(offsets[85], object.paystackRef);
  writer.writeString(offsets[86], object.phoneNumber);
  writer.writeString(offsets[87], object.pointDayExpire);
  writer.writeString(offsets[88], object.points);
  writer.writeString(offsets[89], object.postPrivacy);
  writer.writeString(offsets[90], object.proRemainder);
  writer.writeString(offsets[91], object.proType);
  writer.writeLong(offsets[92], object.providingService);
  writer.writeString(offsets[93], object.refUserId);
  writer.writeString(offsets[94], object.referrer);
  writer.writeString(offsets[95], object.registered);
  writer.writeString(offsets[96], object.relationshipId);
  writer.writeString(offsets[97], object.school);
  writer.writeString(offsets[98], object.schoolCompleted);
  writer.writeString(offsets[99], object.shareMyData);
  writer.writeString(offsets[100], object.shareMyLocation);
  writer.writeString(offsets[101], object.showActivitiesPrivacy);
  writer.writeString(offsets[102], object.state);
  writer.writeString(offsets[103], object.status);
  writer.writeString(offsets[104], object.timeCodeSent);
  writer.writeString(offsets[105], object.timezone);
  writer.writeString(offsets[106], object.twitter);
  writer.writeString(offsets[107], object.twoFactor);
  writer.writeString(offsets[108], object.twoFactorHash);
  writer.writeString(offsets[109], object.twoFactorMethod);
  writer.writeString(offsets[110], object.twoFactorVerified);
  writer.writeString(offsets[111], object.url);
  writer.writeString(offsets[112], object.userPlatform);
  writer.writeString(offsets[113], object.username);
  writer.writeString(offsets[114], object.verified);
  writer.writeString(offsets[115], object.visitPrivacy);
  writer.writeString(offsets[116], object.vk);
  writer.writeString(offsets[117], object.wallet);
  writer.writeString(offsets[118], object.weatherUnit);
  writer.writeString(offsets[119], object.webDeviceId);
  writer.writeString(offsets[120], object.website);
  writer.writeString(offsets[121], object.working);
  writer.writeString(offsets[122], object.workingLink);
  writer.writeString(offsets[123], object.youtube);
  writer.writeString(offsets[124], object.zip);
}

MessageUser _messageUserDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = MessageUser(
    about: reader.readStringOrNull(offsets[0]),
    active: reader.readStringOrNull(offsets[1]),
    address: reader.readStringOrNull(offsets[2]),
    admin: reader.readStringOrNull(offsets[3]),
    androidMDeviceId: reader.readStringOrNull(offsets[4]),
    androidNDeviceId: reader.readStringOrNull(offsets[5]),
    apiNotificationSettings: reader.readObjectOrNull<ApiNotificationSettings>(
      offsets[6],
      ApiNotificationSettingsSchema.deserialize,
      allOffsets,
    ),
    authyId: reader.readStringOrNull(offsets[7]),
    avatar: reader.readStringOrNull(offsets[8]),
    avatarFull: reader.readStringOrNull(offsets[9]),
    backgroundImage: reader.readStringOrNull(offsets[10]),
    balance: reader.readStringOrNull(offsets[11]),
    banned: reader.readStringOrNull(offsets[12]),
    bannedReason: reader.readStringOrNull(offsets[13]),
    birthPrivacy: reader.readStringOrNull(offsets[14]),
    birthday: reader.readStringOrNull(offsets[15]),
    city: reader.readStringOrNull(offsets[16]),
    codeSent: reader.readStringOrNull(offsets[17]),
    confirmFollowers: reader.readStringOrNull(offsets[18]),
    convertedPoints: reader.readStringOrNull(offsets[19]),
    countryId: reader.readStringOrNull(offsets[20]),
    cover: reader.readStringOrNull(offsets[21]),
    credits: reader.readStringOrNull(offsets[22]),
    currentlyWorking: reader.readStringOrNull(offsets[23]),
    dailyPoints: reader.readStringOrNull(offsets[24]),
    details: reader.readObjectOrNull<Details>(
      offsets[25],
      DetailsSchema.deserialize,
      allOffsets,
    ),
    eAccepted: reader.readStringOrNull(offsets[26]),
    eCommented: reader.readStringOrNull(offsets[27]),
    eFollowed: reader.readStringOrNull(offsets[28]),
    eJoinedGroup: reader.readStringOrNull(offsets[29]),
    eLastNotif: reader.readStringOrNull(offsets[30]),
    eLiked: reader.readStringOrNull(offsets[31]),
    eLikedPage: reader.readStringOrNull(offsets[32]),
    eMentioned: reader.readStringOrNull(offsets[33]),
    eProfileWallPost: reader.readStringOrNull(offsets[34]),
    eSentmeMsg: reader.readStringOrNull(offsets[35]),
    eShared: reader.readStringOrNull(offsets[36]),
    eVisited: reader.readStringOrNull(offsets[37]),
    eWondered: reader.readStringOrNull(offsets[38]),
    email: reader.readStringOrNull(offsets[39]),
    emailNotification: reader.readStringOrNull(offsets[40]),
    facebook: reader.readStringOrNull(offsets[41]),
    firstName: reader.readStringOrNull(offsets[42]),
    followPrivacy: reader.readStringOrNull(offsets[43]),
    friendPrivacy: reader.readStringOrNull(offsets[44]),
    gender: reader.readStringOrNull(offsets[45]),
    google: reader.readStringOrNull(offsets[46]),
    googleSecret: reader.readStringOrNull(offsets[47]),
    userId: reader.readStringOrNull(offsets[48]),
    infoFile: reader.readStringOrNull(offsets[49]),
    instagram: reader.readStringOrNull(offsets[50]),
    iosMDeviceId: reader.readStringOrNull(offsets[51]),
    iosNDeviceId: reader.readStringOrNull(offsets[52]),
    ipAddress: reader.readStringOrNull(offsets[53]),
    isOpenToWork: reader.readLongOrNull(offsets[54]),
    isPro: reader.readStringOrNull(offsets[55]),
    isProvidingService: reader.readLongOrNull(offsets[56]),
    isReported: reader.readBoolOrNull(offsets[57]),
    isReportedUser: reader.readLongOrNull(offsets[58]),
    isStoryMuted: reader.readBoolOrNull(offsets[59]),
    isVerified: reader.readLongOrNull(offsets[60]),
    language: reader.readStringOrNull(offsets[61]),
    lastAvatarMod: reader.readStringOrNull(offsets[62]),
    lastCoverMod: reader.readStringOrNull(offsets[63]),
    lastDataUpdate: reader.readStringOrNull(offsets[64]),
    lastFollowId: reader.readStringOrNull(offsets[65]),
    lastLocationUpdate: reader.readStringOrNull(offsets[66]),
    lastLoginData: reader.readStringOrNull(offsets[67]),
    lastName: reader.readStringOrNull(offsets[68]),
    lastseen: reader.readStringOrNull(offsets[69]),
    lastseenStatus: reader.readStringOrNull(offsets[70]),
    lastseenUnixTime: reader.readStringOrNull(offsets[71]),
    lat: reader.readStringOrNull(offsets[72]),
    linkedin: reader.readStringOrNull(offsets[73]),
    lng: reader.readStringOrNull(offsets[74]),
    messagePrivacy: reader.readStringOrNull(offsets[75]),
    name: reader.readStringOrNull(offsets[76]),
    newEmail: reader.readStringOrNull(offsets[77]),
    newPhone: reader.readStringOrNull(offsets[78]),
    notificationSettings: reader.readStringOrNull(offsets[79]),
    notificationsSound: reader.readStringOrNull(offsets[80]),
    okru: reader.readStringOrNull(offsets[81]),
    openToWorkData: reader.readStringOrNull(offsets[82]),
    orderPostsBy: reader.readStringOrNull(offsets[83]),
    paypalEmail: reader.readStringOrNull(offsets[84]),
    paystackRef: reader.readStringOrNull(offsets[85]),
    phoneNumber: reader.readStringOrNull(offsets[86]),
    pointDayExpire: reader.readStringOrNull(offsets[87]),
    points: reader.readStringOrNull(offsets[88]),
    postPrivacy: reader.readStringOrNull(offsets[89]),
    proRemainder: reader.readStringOrNull(offsets[90]),
    proType: reader.readStringOrNull(offsets[91]),
    providingService: reader.readLongOrNull(offsets[92]),
    refUserId: reader.readStringOrNull(offsets[93]),
    referrer: reader.readStringOrNull(offsets[94]),
    registered: reader.readStringOrNull(offsets[95]),
    relationshipId: reader.readStringOrNull(offsets[96]),
    school: reader.readStringOrNull(offsets[97]),
    schoolCompleted: reader.readStringOrNull(offsets[98]),
    shareMyData: reader.readStringOrNull(offsets[99]),
    shareMyLocation: reader.readStringOrNull(offsets[100]),
    showActivitiesPrivacy: reader.readStringOrNull(offsets[101]),
    state: reader.readStringOrNull(offsets[102]),
    status: reader.readStringOrNull(offsets[103]),
    timeCodeSent: reader.readStringOrNull(offsets[104]),
    timezone: reader.readStringOrNull(offsets[105]),
    twitter: reader.readStringOrNull(offsets[106]),
    twoFactor: reader.readStringOrNull(offsets[107]),
    twoFactorHash: reader.readStringOrNull(offsets[108]),
    twoFactorMethod: reader.readStringOrNull(offsets[109]),
    twoFactorVerified: reader.readStringOrNull(offsets[110]),
    url: reader.readStringOrNull(offsets[111]),
    userPlatform: reader.readStringOrNull(offsets[112]),
    username: reader.readStringOrNull(offsets[113]),
    verified: reader.readStringOrNull(offsets[114]),
    visitPrivacy: reader.readStringOrNull(offsets[115]),
    vk: reader.readStringOrNull(offsets[116]),
    wallet: reader.readStringOrNull(offsets[117]),
    weatherUnit: reader.readStringOrNull(offsets[118]),
    webDeviceId: reader.readStringOrNull(offsets[119]),
    website: reader.readStringOrNull(offsets[120]),
    working: reader.readStringOrNull(offsets[121]),
    workingLink: reader.readStringOrNull(offsets[122]),
    youtube: reader.readStringOrNull(offsets[123]),
    zip: reader.readStringOrNull(offsets[124]),
  );
  return object;
}

P _messageUserDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readStringOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    case 2:
      return (reader.readStringOrNull(offset)) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readStringOrNull(offset)) as P;
    case 5:
      return (reader.readStringOrNull(offset)) as P;
    case 6:
      return (reader.readObjectOrNull<ApiNotificationSettings>(
        offset,
        ApiNotificationSettingsSchema.deserialize,
        allOffsets,
      )) as P;
    case 7:
      return (reader.readStringOrNull(offset)) as P;
    case 8:
      return (reader.readStringOrNull(offset)) as P;
    case 9:
      return (reader.readStringOrNull(offset)) as P;
    case 10:
      return (reader.readStringOrNull(offset)) as P;
    case 11:
      return (reader.readStringOrNull(offset)) as P;
    case 12:
      return (reader.readStringOrNull(offset)) as P;
    case 13:
      return (reader.readStringOrNull(offset)) as P;
    case 14:
      return (reader.readStringOrNull(offset)) as P;
    case 15:
      return (reader.readStringOrNull(offset)) as P;
    case 16:
      return (reader.readStringOrNull(offset)) as P;
    case 17:
      return (reader.readStringOrNull(offset)) as P;
    case 18:
      return (reader.readStringOrNull(offset)) as P;
    case 19:
      return (reader.readStringOrNull(offset)) as P;
    case 20:
      return (reader.readStringOrNull(offset)) as P;
    case 21:
      return (reader.readStringOrNull(offset)) as P;
    case 22:
      return (reader.readStringOrNull(offset)) as P;
    case 23:
      return (reader.readStringOrNull(offset)) as P;
    case 24:
      return (reader.readStringOrNull(offset)) as P;
    case 25:
      return (reader.readObjectOrNull<Details>(
        offset,
        DetailsSchema.deserialize,
        allOffsets,
      )) as P;
    case 26:
      return (reader.readStringOrNull(offset)) as P;
    case 27:
      return (reader.readStringOrNull(offset)) as P;
    case 28:
      return (reader.readStringOrNull(offset)) as P;
    case 29:
      return (reader.readStringOrNull(offset)) as P;
    case 30:
      return (reader.readStringOrNull(offset)) as P;
    case 31:
      return (reader.readStringOrNull(offset)) as P;
    case 32:
      return (reader.readStringOrNull(offset)) as P;
    case 33:
      return (reader.readStringOrNull(offset)) as P;
    case 34:
      return (reader.readStringOrNull(offset)) as P;
    case 35:
      return (reader.readStringOrNull(offset)) as P;
    case 36:
      return (reader.readStringOrNull(offset)) as P;
    case 37:
      return (reader.readStringOrNull(offset)) as P;
    case 38:
      return (reader.readStringOrNull(offset)) as P;
    case 39:
      return (reader.readStringOrNull(offset)) as P;
    case 40:
      return (reader.readStringOrNull(offset)) as P;
    case 41:
      return (reader.readStringOrNull(offset)) as P;
    case 42:
      return (reader.readStringOrNull(offset)) as P;
    case 43:
      return (reader.readStringOrNull(offset)) as P;
    case 44:
      return (reader.readStringOrNull(offset)) as P;
    case 45:
      return (reader.readStringOrNull(offset)) as P;
    case 46:
      return (reader.readStringOrNull(offset)) as P;
    case 47:
      return (reader.readStringOrNull(offset)) as P;
    case 48:
      return (reader.readStringOrNull(offset)) as P;
    case 49:
      return (reader.readStringOrNull(offset)) as P;
    case 50:
      return (reader.readStringOrNull(offset)) as P;
    case 51:
      return (reader.readStringOrNull(offset)) as P;
    case 52:
      return (reader.readStringOrNull(offset)) as P;
    case 53:
      return (reader.readStringOrNull(offset)) as P;
    case 54:
      return (reader.readLongOrNull(offset)) as P;
    case 55:
      return (reader.readStringOrNull(offset)) as P;
    case 56:
      return (reader.readLongOrNull(offset)) as P;
    case 57:
      return (reader.readBoolOrNull(offset)) as P;
    case 58:
      return (reader.readLongOrNull(offset)) as P;
    case 59:
      return (reader.readBoolOrNull(offset)) as P;
    case 60:
      return (reader.readLongOrNull(offset)) as P;
    case 61:
      return (reader.readStringOrNull(offset)) as P;
    case 62:
      return (reader.readStringOrNull(offset)) as P;
    case 63:
      return (reader.readStringOrNull(offset)) as P;
    case 64:
      return (reader.readStringOrNull(offset)) as P;
    case 65:
      return (reader.readStringOrNull(offset)) as P;
    case 66:
      return (reader.readStringOrNull(offset)) as P;
    case 67:
      return (reader.readStringOrNull(offset)) as P;
    case 68:
      return (reader.readStringOrNull(offset)) as P;
    case 69:
      return (reader.readStringOrNull(offset)) as P;
    case 70:
      return (reader.readStringOrNull(offset)) as P;
    case 71:
      return (reader.readStringOrNull(offset)) as P;
    case 72:
      return (reader.readStringOrNull(offset)) as P;
    case 73:
      return (reader.readStringOrNull(offset)) as P;
    case 74:
      return (reader.readStringOrNull(offset)) as P;
    case 75:
      return (reader.readStringOrNull(offset)) as P;
    case 76:
      return (reader.readStringOrNull(offset)) as P;
    case 77:
      return (reader.readStringOrNull(offset)) as P;
    case 78:
      return (reader.readStringOrNull(offset)) as P;
    case 79:
      return (reader.readStringOrNull(offset)) as P;
    case 80:
      return (reader.readStringOrNull(offset)) as P;
    case 81:
      return (reader.readStringOrNull(offset)) as P;
    case 82:
      return (reader.readStringOrNull(offset)) as P;
    case 83:
      return (reader.readStringOrNull(offset)) as P;
    case 84:
      return (reader.readStringOrNull(offset)) as P;
    case 85:
      return (reader.readStringOrNull(offset)) as P;
    case 86:
      return (reader.readStringOrNull(offset)) as P;
    case 87:
      return (reader.readStringOrNull(offset)) as P;
    case 88:
      return (reader.readStringOrNull(offset)) as P;
    case 89:
      return (reader.readStringOrNull(offset)) as P;
    case 90:
      return (reader.readStringOrNull(offset)) as P;
    case 91:
      return (reader.readStringOrNull(offset)) as P;
    case 92:
      return (reader.readLongOrNull(offset)) as P;
    case 93:
      return (reader.readStringOrNull(offset)) as P;
    case 94:
      return (reader.readStringOrNull(offset)) as P;
    case 95:
      return (reader.readStringOrNull(offset)) as P;
    case 96:
      return (reader.readStringOrNull(offset)) as P;
    case 97:
      return (reader.readStringOrNull(offset)) as P;
    case 98:
      return (reader.readStringOrNull(offset)) as P;
    case 99:
      return (reader.readStringOrNull(offset)) as P;
    case 100:
      return (reader.readStringOrNull(offset)) as P;
    case 101:
      return (reader.readStringOrNull(offset)) as P;
    case 102:
      return (reader.readStringOrNull(offset)) as P;
    case 103:
      return (reader.readStringOrNull(offset)) as P;
    case 104:
      return (reader.readStringOrNull(offset)) as P;
    case 105:
      return (reader.readStringOrNull(offset)) as P;
    case 106:
      return (reader.readStringOrNull(offset)) as P;
    case 107:
      return (reader.readStringOrNull(offset)) as P;
    case 108:
      return (reader.readStringOrNull(offset)) as P;
    case 109:
      return (reader.readStringOrNull(offset)) as P;
    case 110:
      return (reader.readStringOrNull(offset)) as P;
    case 111:
      return (reader.readStringOrNull(offset)) as P;
    case 112:
      return (reader.readStringOrNull(offset)) as P;
    case 113:
      return (reader.readStringOrNull(offset)) as P;
    case 114:
      return (reader.readStringOrNull(offset)) as P;
    case 115:
      return (reader.readStringOrNull(offset)) as P;
    case 116:
      return (reader.readStringOrNull(offset)) as P;
    case 117:
      return (reader.readStringOrNull(offset)) as P;
    case 118:
      return (reader.readStringOrNull(offset)) as P;
    case 119:
      return (reader.readStringOrNull(offset)) as P;
    case 120:
      return (reader.readStringOrNull(offset)) as P;
    case 121:
      return (reader.readStringOrNull(offset)) as P;
    case 122:
      return (reader.readStringOrNull(offset)) as P;
    case 123:
      return (reader.readStringOrNull(offset)) as P;
    case 124:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension MessageUserQueryFilter
    on QueryBuilder<MessageUser, MessageUser, QFilterCondition> {
  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'about',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      aboutIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'about',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      aboutGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'about',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'about',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'about',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> aboutIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'about',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      aboutIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'about',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> activeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'active',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      activeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'active',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> activeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      activeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> activeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> activeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'active',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      activeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> activeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> activeContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'active',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> activeMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'active',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      activeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'active',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      activeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'active',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      addressIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'address',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      addressIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'address',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> addressEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      addressGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> addressLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> addressBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'address',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      addressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> addressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> addressContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'address',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> addressMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'address',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      addressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'address',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      addressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'address',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'admin',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      adminIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'admin',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      adminGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'admin',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'admin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'admin',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> adminIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'admin',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      adminIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'admin',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'androidMDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'androidMDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'androidMDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'androidMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'androidMDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'androidMDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidMDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'androidMDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'androidNDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'androidNDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'androidNDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'androidNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'androidNDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'androidNDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      androidNDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'androidNDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      apiNotificationSettingsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'apiNotificationSettings',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      apiNotificationSettingsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'apiNotificationSettings',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      authyIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'authyId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      authyIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'authyId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> authyIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      authyIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> authyIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> authyIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'authyId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      authyIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> authyIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> authyIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'authyId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> authyIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'authyId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      authyIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'authyId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      authyIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'authyId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> avatarIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'avatar',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'avatar',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> avatarEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> avatarLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> avatarBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'avatar',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> avatarEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> avatarContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'avatar',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> avatarMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'avatar',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatar',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'avatar',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'avatarFull',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'avatarFull',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'avatarFull',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'avatarFull',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'avatarFull',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'avatarFull',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      avatarFullIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'avatarFull',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'backgroundImage',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'backgroundImage',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'backgroundImage',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'backgroundImage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'backgroundImage',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'backgroundImage',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      backgroundImageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'backgroundImage',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      balanceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'balance',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      balanceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'balance',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> balanceEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      balanceGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> balanceLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> balanceBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'balance',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      balanceStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> balanceEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> balanceContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'balance',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> balanceMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'balance',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      balanceIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'balance',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      balanceIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'balance',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> bannedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'banned',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'banned',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> bannedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> bannedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> bannedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'banned',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> bannedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> bannedContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'banned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> bannedMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'banned',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'banned',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'banned',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'bannedReason',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'bannedReason',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'bannedReason',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'bannedReason',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'bannedReason',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'bannedReason',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      bannedReasonIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'bannedReason',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'birthPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'birthPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'birthPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'birthPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'birthPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'birthPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'birthPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'birthday',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'birthday',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> birthdayEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'birthday',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'birthday',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'birthday',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> birthdayBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'birthday',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'birthday',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'birthday',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'birthday',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> birthdayMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'birthday',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'birthday',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      birthdayIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'birthday',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'city',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      cityIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'city',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'city',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'city',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'city',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> cityIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'city',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      cityIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'city',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'codeSent',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'codeSent',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> codeSentEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> codeSentBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'codeSent',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'codeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> codeSentMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'codeSent',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'codeSent',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      codeSentIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'codeSent',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'confirmFollowers',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'confirmFollowers',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'confirmFollowers',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'confirmFollowers',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'confirmFollowers',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'confirmFollowers',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      confirmFollowersIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'confirmFollowers',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'convertedPoints',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'convertedPoints',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'convertedPoints',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'convertedPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'convertedPoints',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'convertedPoints',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      convertedPointsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'convertedPoints',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'countryId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'countryId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'countryId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'countryId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'countryId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'countryId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      countryIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'countryId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'cover',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      coverIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'cover',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      coverGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'cover',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'cover',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'cover',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> coverIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'cover',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      coverIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'cover',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      creditsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'credits',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      creditsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'credits',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> creditsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      creditsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> creditsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> creditsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'credits',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      creditsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> creditsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> creditsContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'credits',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> creditsMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'credits',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      creditsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'credits',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      creditsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'credits',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'currentlyWorking',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'currentlyWorking',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'currentlyWorking',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'currentlyWorking',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'currentlyWorking',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'currentlyWorking',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      currentlyWorkingIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'currentlyWorking',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'dailyPoints',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'dailyPoints',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'dailyPoints',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'dailyPoints',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'dailyPoints',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'dailyPoints',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      dailyPointsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'dailyPoints',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      detailsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'details',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      detailsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'details',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eAccepted',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eAccepted',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eAccepted',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eAccepted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eAccepted',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eAccepted',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eAcceptedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eAccepted',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eCommented',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eCommented',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eCommented',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eCommented',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eCommented',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eCommented',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eCommentedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eCommented',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eFollowed',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eFollowed',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eFollowed',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eFollowed',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eFollowed',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eFollowed',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eFollowedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eFollowed',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eJoinedGroup',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eJoinedGroup',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eJoinedGroup',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eJoinedGroup',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eJoinedGroup',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eJoinedGroup',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eJoinedGroupIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eJoinedGroup',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eLastNotif',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eLastNotif',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eLastNotif',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eLastNotif',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eLastNotif',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLastNotif',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLastNotifIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eLastNotif',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eLikedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eLiked',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eLiked',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eLikedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eLikedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eLikedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eLiked',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eLikedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eLikedContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eLiked',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eLikedMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eLiked',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLiked',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eLiked',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eLikedPage',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eLikedPage',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eLikedPage',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eLikedPage',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eLikedPage',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eLikedPage',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eLikedPageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eLikedPage',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eMentioned',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eMentioned',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eMentioned',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eMentioned',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eMentioned',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eMentioned',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eMentionedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eMentioned',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eProfileWallPost',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eProfileWallPost',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eProfileWallPost',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eProfileWallPost',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eProfileWallPost',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eProfileWallPost',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eProfileWallPostIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eProfileWallPost',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eSentmeMsg',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eSentmeMsg',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eSentmeMsg',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eSentmeMsg',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eSentmeMsg',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eSentmeMsg',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSentmeMsgIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eSentmeMsg',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSharedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eShared',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSharedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eShared',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eSharedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSharedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eSharedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eSharedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eShared',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSharedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eSharedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eSharedContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eShared',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eSharedMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eShared',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSharedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eShared',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eSharedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eShared',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eVisited',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eVisited',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eVisitedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eVisitedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eVisited',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eVisited',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> eVisitedMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eVisited',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eVisited',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eVisitedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eVisited',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'eWondered',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'eWondered',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'eWondered',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'eWondered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'eWondered',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'eWondered',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      eWonderedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'eWondered',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'email',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'email',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'email',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'email',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'email',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> emailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'email',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'email',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'emailNotification',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'emailNotification',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'emailNotification',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'emailNotification',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'emailNotification',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'emailNotification',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      emailNotificationIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'emailNotification',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'facebook',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'facebook',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> facebookEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> facebookBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'facebook',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'facebook',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> facebookMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'facebook',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'facebook',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      facebookIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'facebook',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'firstName',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'firstName',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'firstName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'firstName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'firstName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'firstName',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      firstNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'firstName',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'followPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'followPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'followPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'followPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'followPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'followPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      followPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'followPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'friendPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'friendPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'friendPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'friendPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'friendPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'friendPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      friendPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'friendPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> genderIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'gender',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      genderIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'gender',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> genderEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      genderGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> genderLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> genderBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'gender',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      genderStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> genderEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> genderContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'gender',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> genderMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'gender',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      genderIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'gender',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      genderIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'gender',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> googleIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'google',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'google',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> googleEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> googleLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> googleBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'google',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> googleEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> googleContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'google',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> googleMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'google',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'google',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'google',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'googleSecret',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'googleSecret',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'googleSecret',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'googleSecret',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'googleSecret',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'googleSecret',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      googleSecretIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'googleSecret',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> userIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'id',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> userIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> userIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> userIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'id',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> userIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'id',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> userIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'id',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> userIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'id',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'id',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'infoFile',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'infoFile',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> infoFileEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> infoFileBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'infoFile',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'infoFile',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> infoFileMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'infoFile',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'infoFile',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      infoFileIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'infoFile',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'instagram',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'instagram',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'instagram',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'instagram',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'instagram',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'instagram',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      instagramIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'instagram',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'iosMDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'iosMDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'iosMDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'iosMDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'iosMDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'iosMDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosMDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'iosMDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'iosNDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'iosNDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'iosNDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'iosNDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'iosNDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'iosNDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      iosNDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'iosNDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'ipAddress',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'ipAddress',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'ipAddress',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'ipAddress',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'ipAddress',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'ipAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      ipAddressIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'ipAddress',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isOpenToWorkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isOpenToWork',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isOpenToWorkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isOpenToWork',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isOpenToWorkEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isOpenToWork',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isOpenToWorkGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isOpenToWork',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isOpenToWorkLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isOpenToWork',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isOpenToWorkBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isOpenToWork',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isPro',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isPro',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isPro',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'isPro',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'isPro',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> isProIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isPro',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'isPro',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProvidingServiceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isProvidingService',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProvidingServiceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isProvidingService',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProvidingServiceEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isProvidingService',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProvidingServiceGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isProvidingService',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProvidingServiceLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isProvidingService',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isProvidingServiceBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isProvidingService',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isReported',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isReported',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isReported',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedUserIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isReportedUser',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedUserIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isReportedUser',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedUserEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isReportedUser',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedUserGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isReportedUser',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedUserLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isReportedUser',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isReportedUserBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isReportedUser',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isStoryMutedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isStoryMuted',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isStoryMutedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isStoryMuted',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isStoryMutedEqualTo(bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isStoryMuted',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isVerifiedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isVerified',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isVerifiedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isVerified',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isVerifiedEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isVerified',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isVerifiedGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'isVerified',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isVerifiedLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'isVerified',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      isVerifiedBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'isVerified',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'language',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'language',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> languageEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> languageBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'language',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'language',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> languageMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'language',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'language',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      languageIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'language',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastAvatarMod',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastAvatarMod',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastAvatarMod',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastAvatarMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastAvatarMod',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastAvatarMod',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastAvatarModIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastAvatarMod',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastCoverMod',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastCoverMod',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastCoverMod',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastCoverMod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastCoverMod',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastCoverMod',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastCoverModIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastCoverMod',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastDataUpdate',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastDataUpdate',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastDataUpdate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastDataUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastDataUpdate',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastDataUpdate',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastDataUpdateIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastDataUpdate',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastFollowId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastFollowId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastFollowId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastFollowId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastFollowId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastFollowId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastFollowIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastFollowId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastLocationUpdate',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastLocationUpdate',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastLocationUpdate',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastLocationUpdate',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastLocationUpdate',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastLocationUpdate',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLocationUpdateIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastLocationUpdate',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastLoginData',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastLoginData',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastLoginData',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastLoginData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastLoginData',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastLoginData',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastLoginDataIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastLoginData',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastName',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastName',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lastNameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lastNameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastName',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastName',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lastNameMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastName',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastName',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastNameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastName',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastseen',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastseen',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lastseenEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lastseenBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastseen',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastseen',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lastseenMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastseen',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseen',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastseen',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastseenStatus',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastseenStatus',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastseenStatus',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastseenStatus',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastseenStatus',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseenStatus',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenStatusIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastseenStatus',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lastseenUnixTime',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lastseenUnixTime',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastseenUnixTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lastseenUnixTime',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lastseenUnixTime',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastseenUnixTime',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lastseenUnixTimeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lastseenUnixTime',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lat',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lat',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lat',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lat',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> latIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lat',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      latIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lat',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'linkedin',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'linkedin',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> linkedinEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> linkedinBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'linkedin',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'linkedin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> linkedinMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'linkedin',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'linkedin',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      linkedinIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'linkedin',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'lng',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'lng',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lng',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'lng',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'lng',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> lngIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lng',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      lngIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'lng',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'messagePrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'messagePrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'messagePrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'messagePrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'messagePrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'messagePrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      messagePrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'messagePrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      nameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'name',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'name',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'name',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'name',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> nameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      nameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'name',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'newEmail',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'newEmail',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> newEmailEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> newEmailBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'newEmail',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'newEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> newEmailMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'newEmail',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'newEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newEmailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'newEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'newPhone',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'newPhone',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> newPhoneEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> newPhoneBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'newPhone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'newPhone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> newPhoneMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'newPhone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'newPhone',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      newPhoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'newPhone',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'notificationSettings',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'notificationSettings',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notificationSettings',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'notificationSettings',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'notificationSettings',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationSettings',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationSettingsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'notificationSettings',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'notificationsSound',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'notificationsSound',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notificationsSound',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'notificationsSound',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'notificationsSound',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notificationsSound',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      notificationsSoundIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'notificationsSound',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'okru',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      okruIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'okru',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'okru',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'okru',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'okru',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> okruIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'okru',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      okruIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'okru',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'openToWorkData',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'openToWorkData',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'openToWorkData',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'openToWorkData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'openToWorkData',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'openToWorkData',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      openToWorkDataIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'openToWorkData',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'orderPostsBy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'orderPostsBy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'orderPostsBy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'orderPostsBy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'orderPostsBy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'orderPostsBy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      orderPostsByIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'orderPostsBy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'paypalEmail',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'paypalEmail',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'paypalEmail',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'paypalEmail',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'paypalEmail',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paypalEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paypalEmailIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'paypalEmail',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'paystackRef',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'paystackRef',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'paystackRef',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'paystackRef',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'paystackRef',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'paystackRef',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      paystackRefIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'paystackRef',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'phoneNumber',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'phoneNumber',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'phoneNumber',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'phoneNumber',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'phoneNumber',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'phoneNumber',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      phoneNumberIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'phoneNumber',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'pointDayExpire',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'pointDayExpire',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'pointDayExpire',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'pointDayExpire',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'pointDayExpire',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pointDayExpire',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointDayExpireIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'pointDayExpire',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> pointsIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'points',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointsIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'points',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> pointsEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointsGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> pointsLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> pointsBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'points',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointsStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> pointsEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> pointsContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'points',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> pointsMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'points',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointsIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'points',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      pointsIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'points',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'postPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'postPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'postPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'postPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'postPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'postPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      postPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'postPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'proRemainder',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'proRemainder',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'proRemainder',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'proRemainder',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'proRemainder',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proRemainder',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proRemainderIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'proRemainder',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proTypeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'proType',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proTypeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'proType',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> proTypeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proTypeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> proTypeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> proTypeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'proType',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proTypeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> proTypeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> proTypeContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'proType',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> proTypeMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'proType',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proTypeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'proType',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      proTypeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'proType',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      providingServiceIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'providingService',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      providingServiceIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'providingService',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      providingServiceEqualTo(int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'providingService',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      providingServiceGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'providingService',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      providingServiceLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'providingService',
        value: value,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      providingServiceBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'providingService',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'refUserId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'refUserId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'refUserId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'refUserId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'refUserId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'refUserId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      refUserIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'refUserId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'referrer',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'referrer',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> referrerEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> referrerBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'referrer',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'referrer',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> referrerMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'referrer',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'referrer',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      referrerIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'referrer',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'registered',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'registered',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'registered',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'registered',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'registered',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'registered',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      registeredIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'registered',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'relationshipId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'relationshipId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'relationshipId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'relationshipId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'relationshipId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'relationshipId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      relationshipIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'relationshipId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> schoolIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'school',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'school',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> schoolEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> schoolLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> schoolBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'school',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> schoolEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> schoolContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'school',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> schoolMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'school',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'school',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'school',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'schoolCompleted',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'schoolCompleted',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'schoolCompleted',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'schoolCompleted',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'schoolCompleted',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'schoolCompleted',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      schoolCompletedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'schoolCompleted',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'shareMyData',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'shareMyData',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'shareMyData',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'shareMyData',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'shareMyData',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'shareMyData',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyDataIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'shareMyData',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'shareMyLocation',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'shareMyLocation',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'shareMyLocation',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'shareMyLocation',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'shareMyLocation',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'shareMyLocation',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      shareMyLocationIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'shareMyLocation',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'showActivitiesPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'showActivitiesPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'showActivitiesPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'showActivitiesPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyMatches(String pattern,
          {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'showActivitiesPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'showActivitiesPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      showActivitiesPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'showActivitiesPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'state',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      stateIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'state',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      stateGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'state',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'state',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'state',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> stateIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'state',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      stateIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'state',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> statusIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'status',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      statusIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'status',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> statusEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      statusGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> statusLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> statusBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'status',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      statusStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> statusEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> statusContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'status',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> statusMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'status',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      statusIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'status',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      statusIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'status',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'timeCodeSent',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'timeCodeSent',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'timeCodeSent',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'timeCodeSent',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'timeCodeSent',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timeCodeSent',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timeCodeSentIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'timeCodeSent',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'timezone',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'timezone',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> timezoneEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> timezoneBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'timezone',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'timezone',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> timezoneMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'timezone',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'timezone',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      timezoneIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'timezone',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twitterIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'twitter',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twitterIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'twitter',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> twitterEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twitterGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> twitterLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> twitterBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twitter',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twitterStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> twitterEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> twitterContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twitter',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> twitterMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twitter',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twitterIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twitter',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twitterIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twitter',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'twoFactor',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'twoFactor',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twoFactor',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twoFactor',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twoFactor',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactor',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twoFactor',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'twoFactorHash',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'twoFactorHash',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twoFactorHash',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twoFactorHash',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twoFactorHash',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorHash',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorHashIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twoFactorHash',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'twoFactorMethod',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'twoFactorMethod',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twoFactorMethod',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twoFactorMethod',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twoFactorMethod',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorMethod',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorMethodIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twoFactorMethod',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'twoFactorVerified',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'twoFactorVerified',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'twoFactorVerified',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'twoFactorVerified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'twoFactorVerified',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'twoFactorVerified',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      twoFactorVerifiedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'twoFactorVerified',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'url',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'url',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'url',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'url',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'url',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> urlIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'url',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      urlIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'url',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'userPlatform',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'userPlatform',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'userPlatform',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'userPlatform',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'userPlatform',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'userPlatform',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      userPlatformIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'userPlatform',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'username',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'username',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> usernameEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> usernameBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'username',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'username',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> usernameMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'username',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'username',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      usernameIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'username',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'verified',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'verified',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> verifiedEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> verifiedBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'verified',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'verified',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> verifiedMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'verified',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'verified',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      verifiedIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'verified',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'visitPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'visitPrivacy',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'visitPrivacy',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'visitPrivacy',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'visitPrivacy',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'visitPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      visitPrivacyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'visitPrivacy',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'vk',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'vk',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'vk',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'vk',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'vk',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'vk',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> vkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'vk',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> walletIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'wallet',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      walletIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'wallet',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> walletEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      walletGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> walletLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> walletBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'wallet',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      walletStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> walletEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> walletContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'wallet',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> walletMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'wallet',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      walletIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'wallet',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      walletIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'wallet',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'weatherUnit',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'weatherUnit',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'weatherUnit',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'weatherUnit',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'weatherUnit',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'weatherUnit',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      weatherUnitIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'weatherUnit',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'webDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'webDeviceId',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'webDeviceId',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'webDeviceId',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'webDeviceId',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'webDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      webDeviceIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'webDeviceId',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      websiteIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'website',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      websiteIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'website',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> websiteEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      websiteGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> websiteLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> websiteBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'website',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      websiteStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> websiteEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> websiteContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'website',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> websiteMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'website',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      websiteIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'website',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      websiteIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'website',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'working',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'working',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> workingEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> workingLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> workingBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'working',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> workingEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> workingContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'working',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> workingMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'working',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'working',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'working',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'workingLink',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'workingLink',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'workingLink',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'workingLink',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'workingLink',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'workingLink',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      workingLinkIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'workingLink',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      youtubeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'youtube',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      youtubeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'youtube',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> youtubeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      youtubeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> youtubeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> youtubeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'youtube',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      youtubeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> youtubeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> youtubeContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'youtube',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> youtubeMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'youtube',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      youtubeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'youtube',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      youtubeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'youtube',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'zip',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'zip',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'zip',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'zip',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'zip',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> zipIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'zip',
        value: '',
      ));
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      zipIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'zip',
        value: '',
      ));
    });
  }
}

extension MessageUserQueryObject
    on QueryBuilder<MessageUser, MessageUser, QFilterCondition> {
  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition>
      apiNotificationSettings(FilterQuery<ApiNotificationSettings> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'apiNotificationSettings');
    });
  }

  QueryBuilder<MessageUser, MessageUser, QAfterFilterCondition> details(
      FilterQuery<Details> q) {
    return QueryBuilder.apply(this, (query) {
      return query.object(q, r'details');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

const ReactionSchema = Schema(
  name: r'Reaction',
  id: -239693266717445956,
  properties: {
    r'count': PropertySchema(
      id: 0,
      name: r'count',
      type: IsarType.long,
    ),
    r'isReacted': PropertySchema(
      id: 1,
      name: r'isReacted',
      type: IsarType.bool,
    ),
    r'type': PropertySchema(
      id: 2,
      name: r'type',
      type: IsarType.string,
    )
  },
  estimateSize: _reactionEstimateSize,
  serialize: _reactionSerialize,
  deserialize: _reactionDeserialize,
  deserializeProp: _reactionDeserializeProp,
);

int _reactionEstimateSize(
  Reaction object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.type;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _reactionSerialize(
  Reaction object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeLong(offsets[0], object.count);
  writer.writeBool(offsets[1], object.isReacted);
  writer.writeString(offsets[2], object.type);
}

Reaction _reactionDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = Reaction(
    count: reader.readLongOrNull(offsets[0]),
    isReacted: reader.readBoolOrNull(offsets[1]),
    type: reader.readStringOrNull(offsets[2]),
  );
  return object;
}

P _reactionDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readLongOrNull(offset)) as P;
    case 1:
      return (reader.readBoolOrNull(offset)) as P;
    case 2:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension ReactionQueryFilter
    on QueryBuilder<Reaction, Reaction, QFilterCondition> {
  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> countIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'count',
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> countIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'count',
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> countEqualTo(
      int? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'count',
        value: value,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> countGreaterThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'count',
        value: value,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> countLessThan(
    int? value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'count',
        value: value,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> countBetween(
    int? lower,
    int? upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'count',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> isReactedIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'isReacted',
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> isReactedIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'isReacted',
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> isReactedEqualTo(
      bool? value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'isReacted',
        value: value,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'type',
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'type',
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'type',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'type',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'type',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'type',
        value: '',
      ));
    });
  }

  QueryBuilder<Reaction, Reaction, QAfterFilterCondition> typeIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'type',
        value: '',
      ));
    });
  }
}

extension ReactionQueryObject
    on QueryBuilder<Reaction, Reaction, QFilterCondition> {}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

const MuteSchema = Schema(
  name: r'Mute',
  id: 5890883956897296968,
  properties: {
    r'archive': PropertySchema(
      id: 0,
      name: r'archive',
      type: IsarType.string,
    ),
    r'callChat': PropertySchema(
      id: 1,
      name: r'callChat',
      type: IsarType.string,
    ),
    r'fav': PropertySchema(
      id: 2,
      name: r'fav',
      type: IsarType.string,
    ),
    r'notify': PropertySchema(
      id: 3,
      name: r'notify',
      type: IsarType.string,
    ),
    r'pin': PropertySchema(
      id: 4,
      name: r'pin',
      type: IsarType.string,
    )
  },
  estimateSize: _muteEstimateSize,
  serialize: _muteSerialize,
  deserialize: _muteDeserialize,
  deserializeProp: _muteDeserializeProp,
);

int _muteEstimateSize(
  Mute object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  {
    final value = object.archive;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.callChat;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.fav;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.notify;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  {
    final value = object.pin;
    if (value != null) {
      bytesCount += 3 + value.length * 3;
    }
  }
  return bytesCount;
}

void _muteSerialize(
  Mute object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeString(offsets[0], object.archive);
  writer.writeString(offsets[1], object.callChat);
  writer.writeString(offsets[2], object.fav);
  writer.writeString(offsets[3], object.notify);
  writer.writeString(offsets[4], object.pin);
}

Mute _muteDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = Mute(
    archive: reader.readStringOrNull(offsets[0]),
    callChat: reader.readStringOrNull(offsets[1]),
    fav: reader.readStringOrNull(offsets[2]),
    notify: reader.readStringOrNull(offsets[3]),
    pin: reader.readStringOrNull(offsets[4]),
  );
  return object;
}

P _muteDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readStringOrNull(offset)) as P;
    case 1:
      return (reader.readStringOrNull(offset)) as P;
    case 2:
      return (reader.readStringOrNull(offset)) as P;
    case 3:
      return (reader.readStringOrNull(offset)) as P;
    case 4:
      return (reader.readStringOrNull(offset)) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

extension MuteQueryFilter on QueryBuilder<Mute, Mute, QFilterCondition> {
  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'archive',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'archive',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'archive',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'archive',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'archive',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'archive',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'archive',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'archive',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveContains(String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'archive',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveMatches(String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'archive',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'archive',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> archiveIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'archive',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'callChat',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'callChat',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'callChat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'callChat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'callChat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'callChat',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'callChat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'callChat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatContains(String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'callChat',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'callChat',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'callChat',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> callChatIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'callChat',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'fav',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'fav',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fav',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'fav',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'fav',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'fav',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'fav',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'fav',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favContains(String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'fav',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favMatches(String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'fav',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'fav',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> favIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'fav',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'notify',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'notify',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notify',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'notify',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'notify',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'notify',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'notify',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'notify',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyContains(String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'notify',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyMatches(String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'notify',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'notify',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> notifyIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'notify',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinIsNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNull(
        property: r'pin',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinIsNotNull() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(const FilterCondition.isNotNull(
        property: r'pin',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinEqualTo(
    String? value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinGreaterThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'pin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinLessThan(
    String? value, {
    bool include = false,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'pin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinBetween(
    String? lower,
    String? upper, {
    bool includeLower = true,
    bool includeUpper = true,
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'pin',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.startsWith(
        property: r'pin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.endsWith(
        property: r'pin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinContains(String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.contains(
        property: r'pin',
        value: value,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinMatches(String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.matches(
        property: r'pin',
        wildcard: pattern,
        caseSensitive: caseSensitive,
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'pin',
        value: '',
      ));
    });
  }

  QueryBuilder<Mute, Mute, QAfterFilterCondition> pinIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        property: r'pin',
        value: '',
      ));
    });
  }
}

extension MuteQueryObject on QueryBuilder<Mute, Mute, QFilterCondition> {}
